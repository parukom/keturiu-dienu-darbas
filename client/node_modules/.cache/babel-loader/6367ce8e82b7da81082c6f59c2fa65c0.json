{"ast":null,"code":"var _jsxFileName = \"/Users/tomasdudovicius/Desktop/CodeAcademy/React/keturiu-dienu-darbas/client/src/components/Karusele/ImageGallery.js\";\nimport clsx from 'clsx';\nimport React from 'react';\nimport throttle from 'lodash-es/throttle';\nimport debounce from 'lodash-es/debounce';\nimport isEqual from 'react-fast-compare';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { LEFT, RIGHT, UP, DOWN } from 'react-swipeable';\nimport { arrayOf, bool, func, number, oneOf, shape, string } from 'prop-types';\nimport Item from 'src/Item';\nimport Fullscreen from 'src/controls/Fullscreen';\nimport LeftNav from 'src/controls/LeftNav';\nimport RightNav from 'src/controls/RightNav';\nimport PlayPause from 'src/controls/PlayPause';\nimport SwipeWrapper from 'src/SwipeWrapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst screenChangeEvents = ['fullscreenchange', 'MSFullscreenChange', 'mozfullscreenchange', 'webkitfullscreenchange'];\nconst imageSetType = arrayOf(shape({\n  srcSet: string,\n  media: string\n}));\n\nfunction isEnterOrSpaceKey(event) {\n  const key = parseInt(event.keyCode || event.which || 0, 10);\n  const ENTER_KEY_CODE = 66;\n  const SPACEBAR_KEY_CODE = 62;\n  return key === ENTER_KEY_CODE || key === SPACEBAR_KEY_CODE;\n}\n\nclass ImageGallery extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentIndex: props.startIndex,\n      thumbsTranslate: 0,\n      thumbsSwipedTranslate: 0,\n      currentSlideOffset: 0,\n      galleryWidth: 0,\n      thumbnailsWrapperWidth: 0,\n      thumbnailsWrapperHeight: 0,\n      thumbsStyle: {\n        transition: `all ${props.slideDuration}ms ease-out`\n      },\n      isFullscreen: false,\n      isSwipingThumbnail: false,\n      isPlaying: false\n    };\n    this.loadedImages = {};\n    this.imageGallery = /*#__PURE__*/React.createRef();\n    this.thumbnailsWrapper = /*#__PURE__*/React.createRef();\n    this.thumbnails = /*#__PURE__*/React.createRef();\n    this.imageGallerySlideWrapper = /*#__PURE__*/React.createRef(); // bindings\n\n    this.handleImageLoaded = this.handleImageLoaded.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleTouchMove = this.handleTouchMove.bind(this);\n    this.handleOnSwiped = this.handleOnSwiped.bind(this);\n    this.handleScreenChange = this.handleScreenChange.bind(this);\n    this.handleSwiping = this.handleSwiping.bind(this);\n    this.handleThumbnailSwiping = this.handleThumbnailSwiping.bind(this);\n    this.handleOnThumbnailSwiped = this.handleOnThumbnailSwiped.bind(this);\n    this.onThumbnailMouseLeave = this.onThumbnailMouseLeave.bind(this);\n    this.handleImageError = this.handleImageError.bind(this);\n    this.pauseOrPlay = this.pauseOrPlay.bind(this);\n    this.renderThumbInner = this.renderThumbInner.bind(this);\n    this.renderItem = this.renderItem.bind(this);\n    this.slideLeft = this.slideLeft.bind(this);\n    this.slideRight = this.slideRight.bind(this);\n    this.toggleFullScreen = this.toggleFullScreen.bind(this);\n    this.togglePlay = this.togglePlay.bind(this); // Used to update the throttle if slideDuration changes\n\n    this.unthrottledSlideToIndex = this.slideToIndex;\n    this.slideToIndex = throttle(this.unthrottledSlideToIndex, props.slideDuration, {\n      trailing: false\n    });\n\n    if (props.lazyLoad) {\n      this.lazyLoaded = [];\n    }\n  }\n\n  componentDidMount() {\n    const {\n      autoPlay,\n      useWindowKeyDown\n    } = this.props;\n\n    if (autoPlay) {\n      this.play();\n    }\n\n    if (useWindowKeyDown) {\n      window.addEventListener('keydown', this.handleKeyDown);\n    } else {\n      this.imageGallery.current.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    window.addEventListener('mousedown', this.handleMouseDown);\n    window.addEventListener('touchmove', this.handleTouchMove, {\n      passive: false\n    });\n    this.initResizeObserver(this.imageGallerySlideWrapper);\n    this.addScreenChangeEvent();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      items,\n      lazyLoad,\n      slideDuration,\n      slideInterval,\n      startIndex,\n      thumbnailPosition,\n      showThumbnails,\n      useWindowKeyDown\n    } = this.props;\n    const {\n      currentIndex,\n      isPlaying\n    } = this.state;\n    const itemsSizeChanged = prevProps.items.length !== items.length;\n    const itemsChanged = !isEqual(prevProps.items, items);\n    const startIndexUpdated = prevProps.startIndex !== startIndex;\n    const thumbnailsPositionChanged = prevProps.thumbnailPosition !== thumbnailPosition;\n    const showThumbnailsChanged = prevProps.showThumbnails !== showThumbnails;\n\n    if (slideInterval !== prevProps.slideInterval || slideDuration !== prevProps.slideDuration) {\n      // refresh setInterval\n      if (isPlaying) {\n        this.pause();\n        this.play();\n      }\n    }\n\n    if (thumbnailsPositionChanged) {\n      // re-initialize resizeObserver because slides was unmounted and mounted again\n      this.removeResizeObserver();\n      this.initResizeObserver(this.imageGallerySlideWrapper);\n    }\n\n    if (itemsSizeChanged || showThumbnailsChanged) {\n      this.handleResize();\n    }\n\n    if (prevState.currentIndex !== currentIndex) {\n      this.slideThumbnailBar();\n    } // if slideDuration changes, update slideToIndex throttle\n\n\n    if (prevProps.slideDuration !== slideDuration) {\n      this.slideToIndex = throttle(this.unthrottledSlideToIndex, slideDuration, {\n        trailing: false\n      });\n    }\n\n    if (lazyLoad && (!prevProps.lazyLoad || itemsChanged)) {\n      this.lazyLoaded = [];\n    }\n\n    if (useWindowKeyDown !== prevProps.useWindowKeyDown) {\n      if (useWindowKeyDown) {\n        this.imageGallery.current.removeEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('keydown', this.handleKeyDown);\n      } else {\n        window.removeEventListener('keydown', this.handleKeyDown);\n        this.imageGallery.current.addEventListener('keydown', this.handleKeyDown);\n      }\n    }\n\n    if (startIndexUpdated || itemsChanged) {\n      // TODO: this should be fix/removed\n      this.setState({\n        currentIndex: startIndex\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      useWindowKeyDown\n    } = this.props;\n    window.removeEventListener('mousedown', this.handleMouseDown);\n    window.removeEventListener('touchmove', this.handleTouchMove);\n    this.removeScreenChangeEvent();\n    this.removeResizeObserver();\n\n    if (this.playPauseIntervalId) {\n      window.clearInterval(this.playPauseIntervalId);\n      this.playPauseIntervalId = null;\n    }\n\n    if (this.transitionTimer) {\n      window.clearTimeout(this.transitionTimer);\n    }\n\n    if (useWindowKeyDown) {\n      window.removeEventListener('keydown', this.handleKeyDown);\n    } else {\n      this.imageGallery.current.removeEventListener('keydown', this.handleKeyDown);\n    }\n  }\n\n  onSliding() {\n    const {\n      currentIndex,\n      isTransitioning\n    } = this.state;\n    const {\n      onSlide,\n      slideDuration\n    } = this.props;\n    this.transitionTimer = window.setTimeout(() => {\n      if (isTransitioning) {\n        this.setState({\n          isTransitioning: !isTransitioning,\n          // reset swiping thumbnail after transitioning to new slide,\n          // so we can resume thumbnail auto translate\n          isSwipingThumbnail: false\n        });\n\n        if (onSlide) {\n          onSlide(currentIndex);\n        }\n      }\n    }, slideDuration + 50);\n  }\n\n  onThumbnailClick(event, index) {\n    const {\n      onThumbnailClick\n    } = this.props; // blur element to remove outline cause by focus\n\n    event.target.parentNode.parentNode.blur();\n    this.slideToIndex(index, event);\n\n    if (onThumbnailClick) {\n      onThumbnailClick(event, index);\n    }\n  }\n\n  onThumbnailMouseOver(event, index) {\n    if (this.thumbnailMouseOverTimer) {\n      window.clearTimeout(this.thumbnailMouseOverTimer);\n      this.thumbnailMouseOverTimer = null;\n    }\n\n    this.thumbnailMouseOverTimer = window.setTimeout(() => {\n      this.slideToIndex(index);\n      this.pause();\n    }, 300);\n  }\n\n  onThumbnailMouseLeave() {\n    if (this.thumbnailMouseOverTimer) {\n      const {\n        autoPlay\n      } = this.props;\n      window.clearTimeout(this.thumbnailMouseOverTimer);\n      this.thumbnailMouseOverTimer = null;\n\n      if (autoPlay) {\n        this.play();\n      }\n    }\n  }\n\n  setThumbsTranslate(thumbsTranslate) {\n    this.setState({\n      thumbsTranslate\n    });\n  }\n\n  setModalFullscreen(state) {\n    const {\n      onScreenChange\n    } = this.props;\n    this.setState({\n      modalFullscreen: state\n    }); // manually call because browser does not support screenchange events\n\n    if (onScreenChange) {\n      onScreenChange(state);\n    }\n  }\n\n  getThumbsTranslate(indexDifference) {\n    const {\n      disableThumbnailScroll,\n      items\n    } = this.props;\n    const {\n      thumbnailsWrapperWidth,\n      thumbnailsWrapperHeight\n    } = this.state;\n    let totalScroll;\n    const thumbsElement = this.thumbnails && this.thumbnails.current;\n    if (disableThumbnailScroll) return 0;\n\n    if (thumbsElement) {\n      // total scroll required to see the last thumbnail\n      if (this.isThumbnailVertical()) {\n        if (thumbsElement.scrollHeight <= thumbnailsWrapperHeight) {\n          return 0;\n        }\n\n        totalScroll = thumbsElement.scrollHeight - thumbnailsWrapperHeight;\n      } else {\n        if (thumbsElement.scrollWidth <= thumbnailsWrapperWidth || thumbnailsWrapperWidth <= 0) {\n          return 0;\n        }\n\n        totalScroll = thumbsElement.scrollWidth - thumbnailsWrapperWidth;\n      } // scroll-x required per index change\n\n\n      const perIndexScroll = totalScroll / (items.length - 1);\n      return indexDifference * perIndexScroll;\n    }\n\n    return 0;\n  }\n\n  getAlignmentClassName(index) {\n    // Necessary for lazing loading\n    const {\n      currentIndex\n    } = this.state;\n    const {\n      infinite,\n      items\n    } = this.props;\n    let alignment = '';\n    const leftClassName = 'left';\n    const centerClassName = 'center';\n    const rightClassName = 'right';\n\n    switch (index) {\n      case currentIndex - 1:\n        alignment = ` ${leftClassName}`;\n        break;\n\n      case currentIndex:\n        alignment = ` ${centerClassName}`;\n        break;\n\n      case currentIndex + 1:\n        alignment = ` ${rightClassName}`;\n        break;\n\n      default:\n        break;\n    }\n\n    if (items.length >= 3 && infinite) {\n      if (index === 0 && currentIndex === items.length - 1) {\n        // set first slide as right slide if were sliding right from last slide\n        alignment = ` ${rightClassName}`;\n      } else if (index === items.length - 1 && currentIndex === 0) {\n        // set last slide as left slide if were sliding left from first slide\n        alignment = ` ${leftClassName}`;\n      }\n    }\n\n    return alignment;\n  }\n\n  getTranslateXForTwoSlide(index) {\n    // For taking care of infinite swipe when there are only two slides\n    const {\n      currentIndex,\n      currentSlideOffset,\n      previousIndex\n    } = this.state;\n    const indexChanged = currentIndex !== previousIndex;\n    const firstSlideWasPrevSlide = index === 0 && previousIndex === 0;\n    const secondSlideWasPrevSlide = index === 1 && previousIndex === 1;\n    const firstSlideIsNextSlide = index === 0 && currentIndex === 1;\n    const secondSlideIsNextSlide = index === 1 && currentIndex === 0;\n    const swipingEnded = currentSlideOffset === 0;\n    const baseTranslateX = -100 * currentIndex;\n    let translateX = baseTranslateX + index * 100 + currentSlideOffset; // keep track of user swiping direction\n    // important to understand how to translateX based on last direction\n\n    if (currentSlideOffset > 0) {\n      this.direction = 'left';\n    } else if (currentSlideOffset < 0) {\n      this.direction = 'right';\n    } // when swiping between two slides make sure the next and prev slides\n    // are on both left and right\n\n\n    if (secondSlideIsNextSlide && currentSlideOffset > 0) {\n      // swiping right\n      translateX = -100 + currentSlideOffset;\n    }\n\n    if (firstSlideIsNextSlide && currentSlideOffset < 0) {\n      // swiping left\n      translateX = 100 + currentSlideOffset;\n    }\n\n    if (indexChanged) {\n      // when indexChanged move the slide to the correct side\n      if (firstSlideWasPrevSlide && swipingEnded && this.direction === 'left') {\n        translateX = 100;\n      } else if (secondSlideWasPrevSlide && swipingEnded && this.direction === 'right') {\n        translateX = -100;\n      }\n    } else {\n      // keep the slide on the correct side if the swipe was not successful\n      if (secondSlideIsNextSlide && swipingEnded && this.direction === 'left') {\n        translateX = -100;\n      }\n\n      if (firstSlideIsNextSlide && swipingEnded && this.direction === 'right') {\n        translateX = 100;\n      }\n    }\n\n    return translateX;\n  }\n\n  getThumbnailBarHeight() {\n    if (this.isThumbnailVertical()) {\n      const {\n        gallerySlideWrapperHeight\n      } = this.state;\n      return {\n        height: gallerySlideWrapperHeight\n      };\n    }\n\n    return {};\n  }\n\n  getSlideStyle(index) {\n    const {\n      currentIndex,\n      currentSlideOffset,\n      slideStyle\n    } = this.state;\n    const {\n      infinite,\n      items,\n      useTranslate3D,\n      isRTL\n    } = this.props;\n    const baseTranslateX = -100 * currentIndex;\n    const totalSlides = items.length - 1; // calculates where the other slides belong based on currentIndex\n    // if it is RTL the base line should be reversed\n\n    let translateX = (baseTranslateX + index * 100) * (isRTL ? -1 : 1) + currentSlideOffset;\n\n    if (infinite && items.length > 2) {\n      if (currentIndex === 0 && index === totalSlides) {\n        // make the last slide the slide before the first\n        // if it is RTL the base line should be reversed\n        translateX = -100 * (isRTL ? -1 : 1) + currentSlideOffset;\n      } else if (currentIndex === totalSlides && index === 0) {\n        // make the first slide the slide after the last\n        // if it is RTL the base line should be reversed\n        translateX = 100 * (isRTL ? -1 : 1) + currentSlideOffset;\n      }\n    } // Special case when there are only 2 items with infinite on\n\n\n    if (infinite && items.length === 2) {\n      translateX = this.getTranslateXForTwoSlide(index);\n    }\n\n    let translate = `translate(${translateX}%, 0)`;\n\n    if (useTranslate3D) {\n      translate = `translate3d(${translateX}%, 0, 0)`;\n    } // don't show some slides while transitioning to avoid background transitions\n\n\n    const isVisible = this.isSlideVisible(index);\n    return {\n      display: isVisible ? 'inherit' : 'none',\n      WebkitTransform: translate,\n      MozTransform: translate,\n      msTransform: translate,\n      OTransform: translate,\n      transform: translate,\n      ...slideStyle\n    };\n  }\n\n  getCurrentIndex() {\n    const {\n      currentIndex\n    } = this.state;\n    return currentIndex;\n  }\n\n  getThumbnailStyle() {\n    let translate;\n    const {\n      useTranslate3D,\n      isRTL\n    } = this.props;\n    const {\n      thumbsTranslate,\n      thumbsStyle\n    } = this.state;\n    const verticalTranslateValue = isRTL ? thumbsTranslate * -1 : thumbsTranslate;\n\n    if (this.isThumbnailVertical()) {\n      translate = `translate(0, ${thumbsTranslate}px)`;\n\n      if (useTranslate3D) {\n        translate = `translate3d(0, ${thumbsTranslate}px, 0)`;\n      }\n    } else {\n      translate = `translate(${verticalTranslateValue}px, 0)`;\n\n      if (useTranslate3D) {\n        translate = `translate3d(${verticalTranslateValue}px, 0, 0)`;\n      }\n    }\n\n    return {\n      WebkitTransform: translate,\n      MozTransform: translate,\n      msTransform: translate,\n      OTransform: translate,\n      transform: translate,\n      ...thumbsStyle\n    };\n  }\n\n  getSlideItems() {\n    const {\n      currentIndex\n    } = this.state;\n    const {\n      items,\n      slideOnThumbnailOver,\n      onClick,\n      lazyLoad,\n      onTouchMove,\n      onTouchEnd,\n      onTouchStart,\n      onMouseOver,\n      onMouseLeave,\n      renderItem,\n      renderThumbInner,\n      showThumbnails,\n      showBullets\n    } = this.props;\n    const slides = [];\n    const thumbnails = [];\n    const bullets = [];\n    items.forEach((item, index) => {\n      const alignment = this.getAlignmentClassName(index);\n      const originalClass = item.originalClass ? ` ${item.originalClass}` : '';\n      const thumbnailClass = item.thumbnailClass ? ` ${item.thumbnailClass}` : '';\n      const handleRenderItem = item.renderItem || renderItem || this.renderItem;\n      const handleRenderThumbInner = item.renderThumbInner || renderThumbInner || this.renderThumbInner;\n      const showItem = !lazyLoad || alignment || this.lazyLoaded[index];\n\n      if (showItem && lazyLoad && !this.lazyLoaded[index]) {\n        this.lazyLoaded[index] = true;\n      }\n\n      const slideStyle = this.getSlideStyle(index);\n\n      const slide = /*#__PURE__*/_jsxDEV(\"div\", {\n        \"aria-label\": `Go to Slide ${index + 1}`,\n        tabIndex: \"-1\",\n        className: `image-gallery-slide ${alignment} ${originalClass}`,\n        style: slideStyle,\n        onClick: onClick,\n        onKeyUp: this.handleSlideKeyUp,\n        onTouchMove: onTouchMove,\n        onTouchEnd: onTouchEnd,\n        onTouchStart: onTouchStart,\n        onMouseOver: onMouseOver,\n        onFocus: onMouseOver,\n        onMouseLeave: onMouseLeave,\n        role: \"button\",\n        children: showItem ? handleRenderItem(item) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 48\n        }, this)\n      }, `slide-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this);\n\n      slides.push(slide); // Don't add thumbnails if there is none\n\n      if (showThumbnails && item.thumbnail) {\n        const igThumbnailClass = clsx('image-gallery-thumbnail', thumbnailClass, {\n          active: currentIndex === index\n        });\n        thumbnails.push( /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          tabIndex: \"0\",\n          \"aria-pressed\": currentIndex === index ? 'true' : 'false',\n          \"aria-label\": `Go to Slide ${index + 1}`,\n          className: igThumbnailClass,\n          onMouseLeave: slideOnThumbnailOver ? this.onThumbnailMouseLeave : null,\n          onMouseOver: event => this.handleThumbnailMouseOver(event, index),\n          onFocus: event => this.handleThumbnailMouseOver(event, index),\n          onKeyUp: event => this.handleThumbnailKeyUp(event, index),\n          onClick: event => this.onThumbnailClick(event, index),\n          children: handleRenderThumbInner(item)\n        }, `thumbnail-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this));\n      }\n\n      if (showBullets) {\n        // generate bullet elements and store them in array\n        const bulletOnClick = event => {\n          if (item.bulletOnClick) {\n            item.bulletOnClick({\n              item,\n              itemIndex: index,\n              currentIndex\n            });\n          } // blur element to remove outline caused by focus\n\n\n          event.target.blur();\n          return this.slideToIndex.call(this, index, event);\n        };\n\n        const igBulletClass = clsx('image-gallery-bullet', item.bulletClass, {\n          active: currentIndex === index\n        });\n        bullets.push( /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: igBulletClass,\n          onClick: bulletOnClick,\n          \"aria-pressed\": currentIndex === index ? 'true' : 'false',\n          \"aria-label\": `Go to Slide ${index + 1}`\n        }, `bullet-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }, this));\n      }\n    });\n    return {\n      slides,\n      thumbnails,\n      bullets\n    };\n  }\n\n  ignoreIsTransitioning() {\n    /*\n      Ignore isTransitioning because were not going to sibling slides\n      e.g. center to left or center to right\n    */\n    const {\n      items\n    } = this.props;\n    const {\n      previousIndex,\n      currentIndex\n    } = this.state;\n    const totalSlides = items.length - 1; // we want to show the in between slides transition\n\n    const slidingMoreThanOneSlideLeftOrRight = Math.abs(previousIndex - currentIndex) > 1;\n    const notGoingFromFirstToLast = !(previousIndex === 0 && currentIndex === totalSlides);\n    const notGoingFromLastToFirst = !(previousIndex === totalSlides && currentIndex === 0);\n    return slidingMoreThanOneSlideLeftOrRight && notGoingFromFirstToLast && notGoingFromLastToFirst;\n  }\n\n  isFirstOrLastSlide(index) {\n    const {\n      items\n    } = this.props;\n    const totalSlides = items.length - 1;\n    const isLastSlide = index === totalSlides;\n    const isFirstSlide = index === 0;\n    return isLastSlide || isFirstSlide;\n  }\n\n  slideIsTransitioning(index) {\n    /*\n    returns true if the gallery is transitioning and the index is not the\n    previous or currentIndex\n    */\n    const {\n      isTransitioning,\n      previousIndex,\n      currentIndex\n    } = this.state;\n    const indexIsNotPreviousOrNextSlide = !(index === previousIndex || index === currentIndex);\n    return isTransitioning && indexIsNotPreviousOrNextSlide;\n  }\n\n  isSlideVisible(index) {\n    /*\n      Show slide if slide is the current slide and the next slide\n      OR\n      The slide is going more than one slide left or right, but not going from\n      first to last and not going from last to first\n       Edge case:\n      If you go to the first or last slide, when they're\n      not left, or right of each other they will try to catch up in the background\n      so unless were going from first to last or vice versa we don't want the first\n      or last slide to show up during the transition\n    */\n    return !this.slideIsTransitioning(index) || this.ignoreIsTransitioning() && !this.isFirstOrLastSlide(index);\n  }\n\n  slideThumbnailBar() {\n    const {\n      currentIndex,\n      isSwipingThumbnail\n    } = this.state;\n    const nextTranslate = -this.getThumbsTranslate(currentIndex);\n\n    if (isSwipingThumbnail) {\n      return;\n    }\n\n    if (currentIndex === 0) {\n      this.setState({\n        thumbsTranslate: 0,\n        thumbsSwipedTranslate: 0\n      });\n    } else {\n      this.setState({\n        thumbsTranslate: nextTranslate,\n        thumbsSwipedTranslate: nextTranslate\n      });\n    }\n  }\n\n  canSlide() {\n    const {\n      items\n    } = this.props;\n    return items.length >= 2;\n  }\n\n  canSlideLeft() {\n    const {\n      infinite,\n      isRTL\n    } = this.props;\n    return infinite || (isRTL ? this.canSlideNext() : this.canSlidePrevious());\n  }\n\n  canSlideRight() {\n    const {\n      infinite,\n      isRTL\n    } = this.props;\n    return infinite || (isRTL ? this.canSlidePrevious() : this.canSlideNext());\n  }\n\n  canSlidePrevious() {\n    const {\n      currentIndex\n    } = this.state;\n    return currentIndex > 0;\n  }\n\n  canSlideNext() {\n    const {\n      currentIndex\n    } = this.state;\n    const {\n      items\n    } = this.props;\n    return currentIndex < items.length - 1;\n  }\n\n  handleSwiping(_ref) {\n    let {\n      event,\n      absX,\n      dir\n    } = _ref;\n    const {\n      disableSwipe,\n      stopPropagation\n    } = this.props;\n    const {\n      galleryWidth,\n      isTransitioning,\n      swipingUpDown,\n      swipingLeftRight\n    } = this.state; // if the initial swiping is up/down prevent moving the slides until swipe ends\n\n    if ((dir === UP || dir === DOWN || swipingUpDown) && !swipingLeftRight) {\n      if (!swipingUpDown) {\n        this.setState({\n          swipingUpDown: true\n        });\n      }\n\n      return;\n    }\n\n    if ((dir === LEFT || dir === RIGHT) && !swipingLeftRight) {\n      this.setState({\n        swipingLeftRight: true\n      });\n    }\n\n    if (disableSwipe) return;\n    const {\n      swipingTransitionDuration\n    } = this.props;\n\n    if (stopPropagation) {\n      event.preventDefault();\n    }\n\n    if (!isTransitioning) {\n      const side = dir === RIGHT ? 1 : -1;\n      let currentSlideOffset = absX / galleryWidth * 100;\n\n      if (Math.abs(currentSlideOffset) >= 100) {\n        currentSlideOffset = 100;\n      }\n\n      const swipingTransition = {\n        transition: `transform ${swipingTransitionDuration}ms ease-out`\n      };\n      this.setState({\n        currentSlideOffset: side * currentSlideOffset,\n        slideStyle: swipingTransition\n      });\n    } else {\n      // don't move the slide\n      this.setState({\n        currentSlideOffset: 0\n      });\n    }\n  }\n\n  handleThumbnailSwiping(_ref2) {\n    let {\n      event,\n      absX,\n      absY,\n      dir\n    } = _ref2;\n    const {\n      stopPropagation,\n      swipingThumbnailTransitionDuration\n    } = this.props;\n    const {\n      thumbsSwipedTranslate,\n      thumbnailsWrapperHeight,\n      thumbnailsWrapperWidth,\n      swipingUpDown,\n      swipingLeftRight\n    } = this.state;\n\n    if (this.isThumbnailVertical()) {\n      // if the initial swiping is left/right, prevent moving the thumbnail bar until swipe ends\n      if ((dir === LEFT || dir === RIGHT || swipingLeftRight) && !swipingUpDown) {\n        if (!swipingLeftRight) {\n          this.setState({\n            swipingLeftRight: true\n          });\n        }\n\n        return;\n      }\n\n      if ((dir === UP || dir === DOWN) && !swipingUpDown) {\n        this.setState({\n          swipingUpDown: true\n        });\n      }\n    } else {\n      // if the initial swiping is up/down, prevent moving the thumbnail bar until swipe ends\n      if ((dir === UP || dir === DOWN || swipingUpDown) && !swipingLeftRight) {\n        if (!swipingUpDown) {\n          this.setState({\n            swipingUpDown: true\n          });\n        }\n\n        return;\n      }\n\n      if ((dir === LEFT || dir === RIGHT) && !swipingLeftRight) {\n        this.setState({\n          swipingLeftRight: true\n        });\n      }\n    }\n\n    const thumbsElement = this.thumbnails && this.thumbnails.current;\n    const emptySpaceMargin = 20; // 20px to add some margin to show empty space\n\n    let thumbsTranslate;\n    let totalSwipeableLength;\n    let hasSwipedPassedEnd;\n    let hasSwipedPassedStart;\n    let isThumbnailBarSmallerThanContainer;\n\n    if (this.isThumbnailVertical()) {\n      const slideY = dir === DOWN ? absY : -absY;\n      thumbsTranslate = thumbsSwipedTranslate + slideY;\n      totalSwipeableLength = thumbsElement.scrollHeight - thumbnailsWrapperHeight + emptySpaceMargin;\n      hasSwipedPassedEnd = Math.abs(thumbsTranslate) > totalSwipeableLength;\n      hasSwipedPassedStart = thumbsTranslate > emptySpaceMargin;\n      isThumbnailBarSmallerThanContainer = thumbsElement.scrollHeight <= thumbnailsWrapperHeight;\n    } else {\n      const slideX = dir === RIGHT ? absX : -absX;\n      thumbsTranslate = thumbsSwipedTranslate + slideX;\n      totalSwipeableLength = thumbsElement.scrollWidth - thumbnailsWrapperWidth + emptySpaceMargin;\n      hasSwipedPassedEnd = Math.abs(thumbsTranslate) > totalSwipeableLength;\n      hasSwipedPassedStart = thumbsTranslate > emptySpaceMargin;\n      isThumbnailBarSmallerThanContainer = thumbsElement.scrollWidth <= thumbnailsWrapperWidth;\n    }\n\n    if (isThumbnailBarSmallerThanContainer) {\n      // no need to swipe a thumbnail bar smaller/shorter than its container\n      return;\n    }\n\n    if ((dir === LEFT || dir === UP) && hasSwipedPassedEnd) {\n      // prevent further swipeing\n      return;\n    }\n\n    if ((dir === RIGHT || dir === DOWN) && hasSwipedPassedStart) {\n      // prevent further swipeing\n      return;\n    }\n\n    if (stopPropagation) event.stopPropagation();\n    const swipingTransition = {\n      transition: `transform ${swipingThumbnailTransitionDuration}ms ease-out`\n    };\n    this.setState({\n      thumbsTranslate,\n      thumbsStyle: swipingTransition\n    });\n  }\n\n  handleOnThumbnailSwiped() {\n    const {\n      thumbsTranslate\n    } = this.state;\n    const {\n      slideDuration\n    } = this.props;\n    this.resetSwipingDirection();\n    this.setState({\n      isSwipingThumbnail: true,\n      thumbsSwipedTranslate: thumbsTranslate,\n      thumbsStyle: {\n        transition: `all ${slideDuration}ms ease-out`\n      }\n    });\n  }\n\n  sufficientSwipe() {\n    const {\n      currentSlideOffset\n    } = this.state;\n    const {\n      swipeThreshold\n    } = this.props;\n    return Math.abs(currentSlideOffset) > swipeThreshold;\n  }\n\n  resetSwipingDirection() {\n    const {\n      swipingUpDown,\n      swipingLeftRight\n    } = this.state;\n\n    if (swipingUpDown) {\n      // user stopped swipingUpDown, reset\n      this.setState({\n        swipingUpDown: false\n      });\n    }\n\n    if (swipingLeftRight) {\n      // user stopped swipingLeftRight, reset\n      this.setState({\n        swipingLeftRight: false\n      });\n    }\n  }\n\n  handleOnSwiped(_ref3) {\n    let {\n      event,\n      dir,\n      velocity\n    } = _ref3;\n    const {\n      disableSwipe,\n      stopPropagation,\n      flickThreshold\n    } = this.props;\n    if (disableSwipe) return;\n    const {\n      isRTL\n    } = this.props;\n    if (stopPropagation) event.stopPropagation();\n    this.resetSwipingDirection(); // if it is RTL the direction is reversed\n\n    const swipeDirection = (dir === LEFT ? 1 : -1) * (isRTL ? -1 : 1);\n    const isSwipeUpOrDown = dir === UP || dir === DOWN;\n    const isLeftRightFlick = velocity > flickThreshold && !isSwipeUpOrDown;\n    this.handleOnSwipedTo(swipeDirection, isLeftRightFlick);\n  }\n\n  handleOnSwipedTo(swipeDirection, isLeftRightFlick) {\n    const {\n      currentIndex,\n      isTransitioning\n    } = this.state;\n    let slideTo = currentIndex;\n\n    if ((this.sufficientSwipe() || isLeftRightFlick) && !isTransitioning) {\n      // slideto the next/prev slide\n      slideTo += swipeDirection;\n    } // If we can't swipe left or right, stay in the current index (noop)\n\n\n    if (swipeDirection === -1 && !this.canSlideLeft() || swipeDirection === 1 && !this.canSlideRight()) {\n      slideTo = currentIndex;\n    }\n\n    this.unthrottledSlideToIndex(slideTo);\n  }\n\n  handleTouchMove(event) {\n    const {\n      swipingLeftRight\n    } = this.state;\n\n    if (swipingLeftRight) {\n      // prevent background scrolling up and down while swiping left and right\n      event.preventDefault();\n    }\n  }\n\n  handleMouseDown() {\n    // keep track of mouse vs keyboard usage for a11y\n    this.imageGallery.current.classList.add('image-gallery-using-mouse');\n  }\n\n  handleKeyDown(event) {\n    const {\n      disableKeyDown,\n      useBrowserFullscreen\n    } = this.props;\n    const {\n      isFullscreen\n    } = this.state; // keep track of mouse vs keyboard usage for a11y\n\n    this.imageGallery.current.classList.remove('image-gallery-using-mouse');\n    if (disableKeyDown) return;\n    const LEFT_ARROW = 37;\n    const RIGHT_ARROW = 39;\n    const ESC_KEY = 27;\n    const key = parseInt(event.keyCode || event.which || 0, 10);\n\n    switch (key) {\n      case LEFT_ARROW:\n        if (this.canSlideLeft() && !this.playPauseIntervalId) {\n          this.slideLeft(event);\n        }\n\n        break;\n\n      case RIGHT_ARROW:\n        if (this.canSlideRight() && !this.playPauseIntervalId) {\n          this.slideRight(event);\n        }\n\n        break;\n\n      case ESC_KEY:\n        if (isFullscreen && !useBrowserFullscreen) {\n          this.exitFullScreen();\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  handleImageError(event) {\n    const {\n      onErrorImageURL\n    } = this.props;\n\n    if (onErrorImageURL && event.target.src.indexOf(onErrorImageURL) === -1) {\n      /* eslint-disable no-param-reassign */\n      event.target.src = onErrorImageURL;\n      /* eslint-enable no-param-reassign */\n    }\n  }\n\n  removeResizeObserver() {\n    if (this.resizeObserver && this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current) {\n      this.resizeObserver.unobserve(this.imageGallerySlideWrapper.current);\n      this.resizeObserver = null;\n    }\n  }\n\n  handleResize() {\n    const {\n      currentIndex\n    } = this.state; // if there is no resizeObserver, component has been unmounted\n\n    if (!this.resizeObserver) {\n      return;\n    }\n\n    if (this.imageGallery && this.imageGallery.current) {\n      this.setState({\n        galleryWidth: this.imageGallery.current.offsetWidth\n      });\n    }\n\n    if (this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current) {\n      this.setState({\n        gallerySlideWrapperHeight: this.imageGallerySlideWrapper.current.offsetHeight\n      });\n    }\n\n    if (this.thumbnailsWrapper && this.thumbnailsWrapper.current) {\n      if (this.isThumbnailVertical()) {\n        this.setState({\n          thumbnailsWrapperHeight: this.thumbnailsWrapper.current.offsetHeight\n        });\n      } else {\n        this.setState({\n          thumbnailsWrapperWidth: this.thumbnailsWrapper.current.offsetWidth\n        });\n      }\n    } // Adjust thumbnail container when thumbnail width or height is adjusted\n\n\n    this.setThumbsTranslate(-this.getThumbsTranslate(currentIndex));\n  }\n\n  initResizeObserver(element) {\n    this.resizeObserver = new ResizeObserver(debounce(entries => {\n      if (!entries) return;\n      entries.forEach(() => {\n        this.handleResize();\n      });\n    }, 300));\n    this.resizeObserver.observe(element.current);\n  }\n\n  toggleFullScreen() {\n    const {\n      isFullscreen\n    } = this.state;\n\n    if (isFullscreen) {\n      this.exitFullScreen();\n    } else {\n      this.fullScreen();\n    }\n  }\n\n  togglePlay() {\n    if (this.playPauseIntervalId) {\n      this.pause();\n    } else {\n      this.play();\n    }\n  }\n\n  handleScreenChange() {\n    /*\n      handles screen change events that the browser triggers e.g. esc key\n    */\n    const {\n      onScreenChange,\n      useBrowserFullscreen\n    } = this.props;\n    const fullScreenElement = document.fullscreenElement || document.msFullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement; // check if screenchange element is the gallery\n\n    const isFullscreen = this.imageGallery.current === fullScreenElement;\n    if (onScreenChange) onScreenChange(isFullscreen);\n    if (useBrowserFullscreen) this.setState({\n      isFullscreen\n    });\n  }\n\n  slideToIndex(index, event) {\n    const {\n      currentIndex,\n      isTransitioning\n    } = this.state;\n    const {\n      items,\n      slideDuration,\n      onBeforeSlide\n    } = this.props;\n\n    if (!isTransitioning) {\n      if (event) {\n        if (this.playPauseIntervalId) {\n          // user triggered event while ImageGallery is playing, reset interval\n          this.pause(false);\n          this.play(false);\n        }\n      }\n\n      const slideCount = items.length - 1;\n      let nextIndex = index;\n\n      if (index < 0) {\n        nextIndex = slideCount;\n      } else if (index > slideCount) {\n        nextIndex = 0;\n      }\n\n      if (onBeforeSlide && nextIndex !== currentIndex) {\n        onBeforeSlide(nextIndex);\n      }\n\n      this.setState({\n        previousIndex: currentIndex,\n        currentIndex: nextIndex,\n        isTransitioning: nextIndex !== currentIndex,\n        currentSlideOffset: 0,\n        slideStyle: {\n          transition: `all ${slideDuration}ms ease-out`\n        }\n      }, this.onSliding);\n    }\n  }\n\n  slideLeft(event) {\n    const {\n      isRTL\n    } = this.props;\n    this.slideTo(event, isRTL ? 'right' : 'left');\n  }\n\n  slideRight(event) {\n    const {\n      isRTL\n    } = this.props;\n    this.slideTo(event, isRTL ? 'left' : 'right');\n  }\n\n  slideTo(event, direction) {\n    const {\n      currentIndex,\n      currentSlideOffset,\n      isTransitioning\n    } = this.state;\n    const {\n      items\n    } = this.props;\n    const nextIndex = currentIndex + (direction === 'left' ? -1 : 1);\n    if (isTransitioning) return;\n\n    if (items.length === 2) {\n      /*\n        When there are only 2 slides fake a tiny swipe to get the slides\n        on the correct side for transitioning\n      */\n      this.setState({\n        // this will reset once index changes\n        currentSlideOffset: currentSlideOffset + (direction === 'left' ? 0.001 : -0.001),\n        slideStyle: {\n          transition: 'none'\n        } // move the slide over instantly\n\n      }, () => {\n        // add 25ms timeout to avoid delay in moving slides over\n        window.setTimeout(() => this.slideToIndex(nextIndex, event), 25);\n      });\n    } else {\n      this.slideToIndex(nextIndex, event);\n    }\n  }\n\n  handleThumbnailMouseOver(event, index) {\n    const {\n      slideOnThumbnailOver\n    } = this.props;\n    if (slideOnThumbnailOver) this.onThumbnailMouseOver(event, index);\n  }\n\n  handleThumbnailKeyUp(event, index) {\n    // a11y support ^_^\n    if (isEnterOrSpaceKey(event)) this.onThumbnailClick(event, index);\n  }\n\n  handleSlideKeyUp(event) {\n    // a11y support ^_^\n    if (isEnterOrSpaceKey(event)) {\n      const {\n        onClick\n      } = this.props;\n      onClick(event);\n    }\n  }\n\n  isThumbnailVertical() {\n    const {\n      thumbnailPosition\n    } = this.props;\n    return thumbnailPosition === 'left' || thumbnailPosition === 'right';\n  }\n\n  addScreenChangeEvent() {\n    screenChangeEvents.forEach(eventName => {\n      document.addEventListener(eventName, this.handleScreenChange);\n    });\n  }\n\n  removeScreenChangeEvent() {\n    screenChangeEvents.forEach(eventName => {\n      document.removeEventListener(eventName, this.handleScreenChange);\n    });\n  }\n\n  fullScreen() {\n    const {\n      useBrowserFullscreen\n    } = this.props;\n    const gallery = this.imageGallery.current;\n\n    if (useBrowserFullscreen) {\n      if (gallery.requestFullscreen) {\n        gallery.requestFullscreen();\n      } else if (gallery.msRequestFullscreen) {\n        gallery.msRequestFullscreen();\n      } else if (gallery.mozRequestFullScreen) {\n        gallery.mozRequestFullScreen();\n      } else if (gallery.webkitRequestFullscreen) {\n        gallery.webkitRequestFullscreen();\n      } else {\n        // fallback to fullscreen modal for unsupported browsers\n        this.setModalFullscreen(true);\n      }\n    } else {\n      this.setModalFullscreen(true);\n    }\n\n    this.setState({\n      isFullscreen: true\n    });\n  }\n\n  exitFullScreen() {\n    const {\n      isFullscreen\n    } = this.state;\n    const {\n      useBrowserFullscreen\n    } = this.props;\n\n    if (isFullscreen) {\n      if (useBrowserFullscreen) {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        } else {\n          // fallback to fullscreen modal for unsupported browsers\n          this.setModalFullscreen(false);\n        }\n      } else {\n        this.setModalFullscreen(false);\n      }\n\n      this.setState({\n        isFullscreen: false\n      });\n    }\n  }\n\n  pauseOrPlay() {\n    const {\n      infinite\n    } = this.props;\n    const {\n      currentIndex\n    } = this.state;\n\n    if (!infinite && !this.canSlideRight()) {\n      this.pause();\n    } else {\n      this.slideToIndex(currentIndex + 1);\n    }\n  }\n\n  play() {\n    let shouldCallOnPlay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const {\n      onPlay,\n      slideInterval,\n      slideDuration\n    } = this.props;\n    const {\n      currentIndex\n    } = this.state;\n\n    if (!this.playPauseIntervalId) {\n      this.setState({\n        isPlaying: true\n      });\n      this.playPauseIntervalId = window.setInterval(this.pauseOrPlay, Math.max(slideInterval, slideDuration));\n\n      if (onPlay && shouldCallOnPlay) {\n        onPlay(currentIndex);\n      }\n    }\n  }\n\n  pause() {\n    let shouldCallOnPause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const {\n      onPause\n    } = this.props;\n    const {\n      currentIndex\n    } = this.state;\n\n    if (this.playPauseIntervalId) {\n      window.clearInterval(this.playPauseIntervalId);\n      this.playPauseIntervalId = null;\n      this.setState({\n        isPlaying: false\n      });\n\n      if (onPause && shouldCallOnPause) {\n        onPause(currentIndex);\n      }\n    }\n  }\n\n  isImageLoaded(item) {\n    /*\n      Keep track of images loaded so that onImageLoad prop is not\n      called multiple times when re-render the images\n    */\n    const imageExists = this.loadedImages[item.original];\n\n    if (imageExists) {\n      return true;\n    } // add image as loaded\n\n\n    this.loadedImages[item.original] = true;\n    return false;\n  }\n\n  handleImageLoaded(event, original) {\n    const {\n      onImageLoad\n    } = this.props;\n    const imageExists = this.loadedImages[original];\n\n    if (!imageExists && onImageLoad) {\n      this.loadedImages[original] = true; // prevent from call again\n      // image just loaded, call onImageLoad\n\n      onImageLoad(event);\n    }\n  }\n\n  renderItem(item) {\n    const {\n      isFullscreen\n    } = this.state;\n    const {\n      onImageError\n    } = this.props;\n    const handleImageError = onImageError || this.handleImageError;\n    return /*#__PURE__*/_jsxDEV(Item, {\n      description: item.description,\n      fullscreen: item.fullscreen,\n      handleImageLoaded: this.handleImageLoaded,\n      isFullscreen: isFullscreen,\n      onImageError: handleImageError,\n      original: item.original,\n      originalAlt: item.originalAlt,\n      originalHeight: item.originalHeight,\n      originalWidth: item.originalWidth,\n      originalTitle: item.originalTitle,\n      sizes: item.sizes,\n      loading: item.loading,\n      srcSet: item.srcSet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1261,\n      columnNumber: 7\n    }, this);\n  }\n\n  renderThumbInner(item) {\n    const {\n      onThumbnailError\n    } = this.props;\n    const handleThumbnailError = onThumbnailError || this.handleImageError;\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"image-gallery-thumbnail-inner\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"image-gallery-thumbnail-image\",\n        src: item.thumbnail,\n        height: item.thumbnailHeight,\n        width: item.thumbnailWidth,\n        alt: item.thumbnailAlt,\n        title: item.thumbnailTitle,\n        loading: item.thumbnailLoading,\n        onError: handleThumbnailError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1285,\n        columnNumber: 9\n      }, this), item.thumbnailLabel && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-gallery-thumbnail-label\",\n        children: item.thumbnailLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1297,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1284,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const {\n      currentIndex,\n      isFullscreen,\n      modalFullscreen,\n      isPlaying\n    } = this.state;\n    const {\n      additionalClass,\n      disableThumbnailSwipe,\n      indexSeparator,\n      // deprecate soon, and allow custom render\n      isRTL,\n      items,\n      thumbnailPosition,\n      renderFullscreenButton,\n      renderCustomControls,\n      renderLeftNav,\n      renderRightNav,\n      showBullets,\n      showFullscreenButton,\n      showIndex,\n      showThumbnails,\n      showNav,\n      showPlayButton,\n      renderPlayPauseButton\n    } = this.props;\n    const thumbnailStyle = this.getThumbnailStyle();\n    const {\n      slides,\n      thumbnails,\n      bullets\n    } = this.getSlideItems();\n    const slideWrapperClass = clsx('image-gallery-slide-wrapper', thumbnailPosition, {\n      'image-gallery-rtl': isRTL\n    });\n\n    const slideWrapper = /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: this.imageGallerySlideWrapper,\n      className: slideWrapperClass,\n      children: [renderCustomControls && renderCustomControls(), this.canSlide() ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [showNav && /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [renderLeftNav(this.slideLeft, !this.canSlideLeft()), renderRightNav(this.slideRight, !this.canSlideRight())]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1350,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(SwipeWrapper, {\n          className: \"image-gallery-swipe\",\n          delta: 0,\n          onSwiping: this.handleSwiping,\n          onSwiped: this.handleOnSwiped,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-gallery-slides\",\n            children: slides\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1362,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1356,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1347,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-gallery-slides\",\n        children: slides\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1368,\n        columnNumber: 13\n      }, this), showPlayButton && renderPlayPauseButton(this.togglePlay, isPlaying), showBullets && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-gallery-bullets\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-gallery-bullets-container\",\n          role: \"navigation\",\n          \"aria-label\": \"Bullet Navigation\",\n          children: bullets\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1377,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1376,\n        columnNumber: 13\n      }, this), showFullscreenButton && renderFullscreenButton(this.toggleFullScreen, isFullscreen), showIndex && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-gallery-index\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"image-gallery-index-current\",\n          children: currentIndex + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1391,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"image-gallery-index-separator\",\n          children: indexSeparator\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1394,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"image-gallery-index-total\",\n          children: items.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1397,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1390,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1343,\n      columnNumber: 7\n    }, this);\n\n    const igClass = clsx('image-gallery', additionalClass, {\n      'fullscreen-modal': modalFullscreen\n    });\n    const igContentClass = clsx('image-gallery-content', thumbnailPosition, {\n      fullscreen: isFullscreen\n    });\n    const thumbnailWrapperClass = clsx('image-gallery-thumbnails-wrapper', thumbnailPosition, {\n      'thumbnails-wrapper-rtl': !this.isThumbnailVertical() && isRTL\n    }, {\n      'thumbnails-swipe-horizontal': !this.isThumbnailVertical() && !disableThumbnailSwipe\n    }, {\n      'thumbnails-swipe-vertical': this.isThumbnailVertical() && !disableThumbnailSwipe\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: this.imageGallery,\n      className: igClass,\n      \"aria-live\": \"polite\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: igContentClass,\n        children: [(thumbnailPosition === 'bottom' || thumbnailPosition === 'right') && slideWrapper, showThumbnails && thumbnails.length > 0 ? /*#__PURE__*/_jsxDEV(SwipeWrapper, {\n          className: thumbnailWrapperClass,\n          delta: 0,\n          onSwiping: !disableThumbnailSwipe && this.handleThumbnailSwiping,\n          onSwiped: !disableThumbnailSwipe && this.handleOnThumbnailSwiped,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-gallery-thumbnails\",\n            ref: this.thumbnailsWrapper,\n            style: this.getThumbnailBarHeight(),\n            children: /*#__PURE__*/_jsxDEV(\"nav\", {\n              ref: this.thumbnails,\n              className: \"image-gallery-thumbnails-container\",\n              style: thumbnailStyle,\n              \"aria-label\": \"Thumbnail Navigation\",\n              children: thumbnails\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1432,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1431,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1425,\n          columnNumber: 15\n        }, this) : null, (thumbnailPosition === 'top' || thumbnailPosition === 'left') && slideWrapper]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1421,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1416,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nImageGallery.propTypes = {\n  flickThreshold: number,\n  items: arrayOf(shape({\n    bulletClass: string,\n    bulletOnClick: func,\n    description: string,\n    original: string,\n    originalHeight: number,\n    originalWidth: number,\n    loading: string,\n    thumbnailHeight: number,\n    thumbnailWidth: number,\n    thumbnailLoading: string,\n    fullscreen: string,\n    originalAlt: string,\n    originalTitle: string,\n    thumbnail: string,\n    thumbnailAlt: string,\n    thumbnailLabel: string,\n    thumbnailTitle: string,\n    originalClass: string,\n    thumbnailClass: string,\n    renderItem: func,\n    renderThumbInner: func,\n    imageSet: imageSetType,\n    srcSet: string,\n    sizes: string\n  })).isRequired,\n  showNav: bool,\n  autoPlay: bool,\n  lazyLoad: bool,\n  infinite: bool,\n  showIndex: bool,\n  showBullets: bool,\n  showThumbnails: bool,\n  showPlayButton: bool,\n  showFullscreenButton: bool,\n  disableThumbnailScroll: bool,\n  disableKeyDown: bool,\n  disableSwipe: bool,\n  disableThumbnailSwipe: bool,\n  useBrowserFullscreen: bool,\n  onErrorImageURL: string,\n  indexSeparator: string,\n  thumbnailPosition: oneOf(['top', 'bottom', 'left', 'right']),\n  startIndex: number,\n  slideDuration: number,\n  slideInterval: number,\n  slideOnThumbnailOver: bool,\n  swipeThreshold: number,\n  swipingTransitionDuration: number,\n  swipingThumbnailTransitionDuration: number,\n  onSlide: func,\n  onBeforeSlide: func,\n  onScreenChange: func,\n  onPause: func,\n  onPlay: func,\n  onClick: func,\n  onImageLoad: func,\n  onImageError: func,\n  onTouchMove: func,\n  onTouchEnd: func,\n  onTouchStart: func,\n  onMouseOver: func,\n  onMouseLeave: func,\n  onThumbnailError: func,\n  onThumbnailClick: func,\n  renderCustomControls: func,\n  renderLeftNav: func,\n  renderRightNav: func,\n  renderPlayPauseButton: func,\n  renderFullscreenButton: func,\n  renderItem: func,\n  renderThumbInner: func,\n  stopPropagation: bool,\n  additionalClass: string,\n  useTranslate3D: bool,\n  isRTL: bool,\n  useWindowKeyDown: bool\n};\nImageGallery.defaultProps = {\n  onErrorImageURL: '',\n  additionalClass: '',\n  showNav: true,\n  autoPlay: false,\n  lazyLoad: false,\n  infinite: true,\n  showIndex: false,\n  showBullets: false,\n  showThumbnails: true,\n  showPlayButton: true,\n  showFullscreenButton: true,\n  disableThumbnailScroll: false,\n  disableKeyDown: false,\n  disableSwipe: false,\n  disableThumbnailSwipe: false,\n  useTranslate3D: true,\n  isRTL: false,\n  useBrowserFullscreen: true,\n  flickThreshold: 0.4,\n  stopPropagation: false,\n  indexSeparator: ' / ',\n  thumbnailPosition: 'bottom',\n  startIndex: 0,\n  slideDuration: 450,\n  swipingTransitionDuration: 0,\n  swipingThumbnailTransitionDuration: 0,\n  onSlide: null,\n  onBeforeSlide: null,\n  onScreenChange: null,\n  onPause: null,\n  onPlay: null,\n  onClick: null,\n  onImageLoad: null,\n  onImageError: null,\n  onTouchMove: null,\n  onTouchEnd: null,\n  onTouchStart: null,\n  onMouseOver: null,\n  onMouseLeave: null,\n  onThumbnailError: null,\n  onThumbnailClick: null,\n  renderCustomControls: null,\n  renderThumbInner: null,\n  renderItem: null,\n  slideInterval: 3000,\n  slideOnThumbnailOver: false,\n  swipeThreshold: 30,\n  renderLeftNav: (onClick, disabled) => /*#__PURE__*/_jsxDEV(LeftNav, {\n    onClick: onClick,\n    disabled: disabled\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1582,\n    columnNumber: 5\n  }, this),\n  renderRightNav: (onClick, disabled) => /*#__PURE__*/_jsxDEV(RightNav, {\n    onClick: onClick,\n    disabled: disabled\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1585,\n    columnNumber: 5\n  }, this),\n  renderPlayPauseButton: (onClick, isPlaying) => /*#__PURE__*/_jsxDEV(PlayPause, {\n    onClick: onClick,\n    isPlaying: isPlaying\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1588,\n    columnNumber: 5\n  }, this),\n  renderFullscreenButton: (onClick, isFullscreen) => /*#__PURE__*/_jsxDEV(Fullscreen, {\n    onClick: onClick,\n    isFullscreen: isFullscreen\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1591,\n    columnNumber: 5\n  }, this),\n  useWindowKeyDown: true\n};\nexport default ImageGallery;","map":{"version":3,"names":["clsx","React","throttle","debounce","isEqual","ResizeObserver","LEFT","RIGHT","UP","DOWN","arrayOf","bool","func","number","oneOf","shape","string","Item","Fullscreen","LeftNav","RightNav","PlayPause","SwipeWrapper","screenChangeEvents","imageSetType","srcSet","media","isEnterOrSpaceKey","event","key","parseInt","keyCode","which","ENTER_KEY_CODE","SPACEBAR_KEY_CODE","ImageGallery","Component","constructor","props","state","currentIndex","startIndex","thumbsTranslate","thumbsSwipedTranslate","currentSlideOffset","galleryWidth","thumbnailsWrapperWidth","thumbnailsWrapperHeight","thumbsStyle","transition","slideDuration","isFullscreen","isSwipingThumbnail","isPlaying","loadedImages","imageGallery","createRef","thumbnailsWrapper","thumbnails","imageGallerySlideWrapper","handleImageLoaded","bind","handleKeyDown","handleMouseDown","handleTouchMove","handleOnSwiped","handleScreenChange","handleSwiping","handleThumbnailSwiping","handleOnThumbnailSwiped","onThumbnailMouseLeave","handleImageError","pauseOrPlay","renderThumbInner","renderItem","slideLeft","slideRight","toggleFullScreen","togglePlay","unthrottledSlideToIndex","slideToIndex","trailing","lazyLoad","lazyLoaded","componentDidMount","autoPlay","useWindowKeyDown","play","window","addEventListener","current","passive","initResizeObserver","addScreenChangeEvent","componentDidUpdate","prevProps","prevState","items","slideInterval","thumbnailPosition","showThumbnails","itemsSizeChanged","length","itemsChanged","startIndexUpdated","thumbnailsPositionChanged","showThumbnailsChanged","pause","removeResizeObserver","handleResize","slideThumbnailBar","removeEventListener","setState","componentWillUnmount","removeScreenChangeEvent","playPauseIntervalId","clearInterval","transitionTimer","clearTimeout","onSliding","isTransitioning","onSlide","setTimeout","onThumbnailClick","index","target","parentNode","blur","onThumbnailMouseOver","thumbnailMouseOverTimer","setThumbsTranslate","setModalFullscreen","onScreenChange","modalFullscreen","getThumbsTranslate","indexDifference","disableThumbnailScroll","totalScroll","thumbsElement","isThumbnailVertical","scrollHeight","scrollWidth","perIndexScroll","getAlignmentClassName","infinite","alignment","leftClassName","centerClassName","rightClassName","getTranslateXForTwoSlide","previousIndex","indexChanged","firstSlideWasPrevSlide","secondSlideWasPrevSlide","firstSlideIsNextSlide","secondSlideIsNextSlide","swipingEnded","baseTranslateX","translateX","direction","getThumbnailBarHeight","gallerySlideWrapperHeight","height","getSlideStyle","slideStyle","useTranslate3D","isRTL","totalSlides","translate","isVisible","isSlideVisible","display","WebkitTransform","MozTransform","msTransform","OTransform","transform","getCurrentIndex","getThumbnailStyle","verticalTranslateValue","getSlideItems","slideOnThumbnailOver","onClick","onTouchMove","onTouchEnd","onTouchStart","onMouseOver","onMouseLeave","showBullets","slides","bullets","forEach","item","originalClass","thumbnailClass","handleRenderItem","handleRenderThumbInner","showItem","slide","handleSlideKeyUp","push","thumbnail","igThumbnailClass","active","handleThumbnailMouseOver","handleThumbnailKeyUp","bulletOnClick","itemIndex","call","igBulletClass","bulletClass","ignoreIsTransitioning","slidingMoreThanOneSlideLeftOrRight","Math","abs","notGoingFromFirstToLast","notGoingFromLastToFirst","isFirstOrLastSlide","isLastSlide","isFirstSlide","slideIsTransitioning","indexIsNotPreviousOrNextSlide","nextTranslate","canSlide","canSlideLeft","canSlideNext","canSlidePrevious","canSlideRight","absX","dir","disableSwipe","stopPropagation","swipingUpDown","swipingLeftRight","swipingTransitionDuration","preventDefault","side","swipingTransition","absY","swipingThumbnailTransitionDuration","emptySpaceMargin","totalSwipeableLength","hasSwipedPassedEnd","hasSwipedPassedStart","isThumbnailBarSmallerThanContainer","slideY","slideX","resetSwipingDirection","sufficientSwipe","swipeThreshold","velocity","flickThreshold","swipeDirection","isSwipeUpOrDown","isLeftRightFlick","handleOnSwipedTo","slideTo","classList","add","disableKeyDown","useBrowserFullscreen","remove","LEFT_ARROW","RIGHT_ARROW","ESC_KEY","exitFullScreen","onErrorImageURL","src","indexOf","resizeObserver","unobserve","offsetWidth","offsetHeight","element","entries","observe","fullScreen","fullScreenElement","document","fullscreenElement","msFullscreenElement","mozFullScreenElement","webkitFullscreenElement","onBeforeSlide","slideCount","nextIndex","eventName","gallery","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","shouldCallOnPlay","onPlay","setInterval","max","shouldCallOnPause","onPause","isImageLoaded","imageExists","original","onImageLoad","onImageError","description","fullscreen","originalAlt","originalHeight","originalWidth","originalTitle","sizes","loading","onThumbnailError","handleThumbnailError","thumbnailHeight","thumbnailWidth","thumbnailAlt","thumbnailTitle","thumbnailLoading","thumbnailLabel","render","additionalClass","disableThumbnailSwipe","indexSeparator","renderFullscreenButton","renderCustomControls","renderLeftNav","renderRightNav","showFullscreenButton","showIndex","showNav","showPlayButton","renderPlayPauseButton","thumbnailStyle","slideWrapperClass","slideWrapper","igClass","igContentClass","thumbnailWrapperClass","propTypes","imageSet","isRequired","defaultProps","disabled"],"sources":["/Users/tomasdudovicius/Desktop/CodeAcademy/React/keturiu-dienu-darbas/client/src/components/Karusele/ImageGallery.js"],"sourcesContent":["import clsx from 'clsx';\nimport React from 'react';\nimport throttle from 'lodash-es/throttle';\nimport debounce from 'lodash-es/debounce';\nimport isEqual from 'react-fast-compare';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport {\n  LEFT,\n  RIGHT,\n  UP,\n  DOWN,\n} from 'react-swipeable';\nimport {\n  arrayOf,\n  bool,\n  func,\n  number,\n  oneOf,\n  shape,\n  string,\n} from 'prop-types';\nimport Item from 'src/Item';\nimport Fullscreen from 'src/controls/Fullscreen';\nimport LeftNav from 'src/controls/LeftNav';\nimport RightNav from 'src/controls/RightNav';\nimport PlayPause from 'src/controls/PlayPause';\nimport SwipeWrapper from 'src/SwipeWrapper';\n\nconst screenChangeEvents = [\n  'fullscreenchange',\n  'MSFullscreenChange',\n  'mozfullscreenchange',\n  'webkitfullscreenchange',\n];\n\nconst imageSetType = arrayOf(shape({\n  srcSet: string,\n  media: string,\n}));\n\nfunction isEnterOrSpaceKey(event) {\n  const key = parseInt(event.keyCode || event.which || 0, 10);\n  const ENTER_KEY_CODE = 66;\n  const SPACEBAR_KEY_CODE = 62;\n  return key === ENTER_KEY_CODE || key === SPACEBAR_KEY_CODE;\n}\n\nclass ImageGallery extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentIndex: props.startIndex,\n      thumbsTranslate: 0,\n      thumbsSwipedTranslate: 0,\n      currentSlideOffset: 0,\n      galleryWidth: 0,\n      thumbnailsWrapperWidth: 0,\n      thumbnailsWrapperHeight: 0,\n      thumbsStyle: { transition: `all ${props.slideDuration}ms ease-out` },\n      isFullscreen: false,\n      isSwipingThumbnail: false,\n      isPlaying: false,\n    };\n    this.loadedImages = {};\n    this.imageGallery = React.createRef();\n    this.thumbnailsWrapper = React.createRef();\n    this.thumbnails = React.createRef();\n    this.imageGallerySlideWrapper = React.createRef();\n\n    // bindings\n    this.handleImageLoaded = this.handleImageLoaded.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleTouchMove = this.handleTouchMove.bind(this);\n    this.handleOnSwiped = this.handleOnSwiped.bind(this);\n    this.handleScreenChange = this.handleScreenChange.bind(this);\n    this.handleSwiping = this.handleSwiping.bind(this);\n    this.handleThumbnailSwiping = this.handleThumbnailSwiping.bind(this);\n    this.handleOnThumbnailSwiped = this.handleOnThumbnailSwiped.bind(this);\n    this.onThumbnailMouseLeave = this.onThumbnailMouseLeave.bind(this);\n    this.handleImageError = this.handleImageError.bind(this);\n    this.pauseOrPlay = this.pauseOrPlay.bind(this);\n    this.renderThumbInner = this.renderThumbInner.bind(this);\n    this.renderItem = this.renderItem.bind(this);\n    this.slideLeft = this.slideLeft.bind(this);\n    this.slideRight = this.slideRight.bind(this);\n    this.toggleFullScreen = this.toggleFullScreen.bind(this);\n    this.togglePlay = this.togglePlay.bind(this);\n\n    // Used to update the throttle if slideDuration changes\n    this.unthrottledSlideToIndex = this.slideToIndex;\n    this.slideToIndex = throttle(\n      this.unthrottledSlideToIndex, props.slideDuration, { trailing: false },\n    );\n\n    if (props.lazyLoad) {\n      this.lazyLoaded = [];\n    }\n  }\n\n  componentDidMount() {\n    const { autoPlay, useWindowKeyDown } = this.props;\n    if (autoPlay) {\n      this.play();\n    }\n    if (useWindowKeyDown) {\n      window.addEventListener('keydown', this.handleKeyDown);\n    } else {\n      this.imageGallery.current.addEventListener('keydown', this.handleKeyDown);\n    }\n    window.addEventListener('mousedown', this.handleMouseDown);\n    window.addEventListener('touchmove', this.handleTouchMove, { passive: false });\n    this.initResizeObserver(this.imageGallerySlideWrapper);\n    this.addScreenChangeEvent();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      items,\n      lazyLoad,\n      slideDuration,\n      slideInterval,\n      startIndex,\n      thumbnailPosition,\n      showThumbnails,\n      useWindowKeyDown,\n    } = this.props;\n    const { currentIndex, isPlaying } = this.state;\n    const itemsSizeChanged = prevProps.items.length !== items.length;\n    const itemsChanged = !isEqual(prevProps.items, items);\n    const startIndexUpdated = prevProps.startIndex !== startIndex;\n    const thumbnailsPositionChanged = prevProps.thumbnailPosition !== thumbnailPosition;\n    const showThumbnailsChanged = prevProps.showThumbnails !== showThumbnails;\n\n    if (slideInterval !== prevProps.slideInterval || slideDuration !== prevProps.slideDuration) {\n      // refresh setInterval\n      if (isPlaying) {\n        this.pause();\n        this.play();\n      }\n    }\n\n    if (thumbnailsPositionChanged) {\n      // re-initialize resizeObserver because slides was unmounted and mounted again\n      this.removeResizeObserver();\n      this.initResizeObserver(this.imageGallerySlideWrapper);\n    }\n\n    if (itemsSizeChanged || showThumbnailsChanged) {\n      this.handleResize();\n    }\n    if (prevState.currentIndex !== currentIndex) {\n      this.slideThumbnailBar();\n    }\n    // if slideDuration changes, update slideToIndex throttle\n    if (prevProps.slideDuration !== slideDuration) {\n      this.slideToIndex = throttle(\n        this.unthrottledSlideToIndex, slideDuration, { trailing: false },\n      );\n    }\n    if (lazyLoad && (!prevProps.lazyLoad || itemsChanged)) {\n      this.lazyLoaded = [];\n    }\n\n    if (useWindowKeyDown !== prevProps.useWindowKeyDown) {\n      if (useWindowKeyDown) {\n        this.imageGallery.current.removeEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('keydown', this.handleKeyDown);\n      } else {\n        window.removeEventListener('keydown', this.handleKeyDown);\n        this.imageGallery.current.addEventListener('keydown', this.handleKeyDown);\n      }\n    }\n\n    if (startIndexUpdated || itemsChanged) {\n      // TODO: this should be fix/removed\n      this.setState({ currentIndex: startIndex });\n    }\n  }\n\n  componentWillUnmount() {\n    const { useWindowKeyDown } = this.props;\n    window.removeEventListener('mousedown', this.handleMouseDown);\n    window.removeEventListener('touchmove', this.handleTouchMove);\n    this.removeScreenChangeEvent();\n    this.removeResizeObserver();\n    if (this.playPauseIntervalId) {\n      window.clearInterval(this.playPauseIntervalId);\n      this.playPauseIntervalId = null;\n    }\n    if (this.transitionTimer) {\n      window.clearTimeout(this.transitionTimer);\n    }\n    if (useWindowKeyDown) {\n      window.removeEventListener('keydown', this.handleKeyDown);\n    } else {\n      this.imageGallery.current.removeEventListener('keydown', this.handleKeyDown);\n    }\n  }\n\n  onSliding() {\n    const { currentIndex, isTransitioning } = this.state;\n    const { onSlide, slideDuration } = this.props;\n    this.transitionTimer = window.setTimeout(() => {\n      if (isTransitioning) {\n        this.setState({\n          isTransitioning: !isTransitioning,\n          // reset swiping thumbnail after transitioning to new slide,\n          // so we can resume thumbnail auto translate\n          isSwipingThumbnail: false,\n        });\n        if (onSlide) {\n          onSlide(currentIndex);\n        }\n      }\n    }, slideDuration + 50);\n  }\n\n  onThumbnailClick(event, index) {\n    const { onThumbnailClick } = this.props;\n    // blur element to remove outline cause by focus\n    event.target.parentNode.parentNode.blur();\n    this.slideToIndex(index, event);\n    if (onThumbnailClick) {\n      onThumbnailClick(event, index);\n    }\n  }\n\n  onThumbnailMouseOver(event, index) {\n    if (this.thumbnailMouseOverTimer) {\n      window.clearTimeout(this.thumbnailMouseOverTimer);\n      this.thumbnailMouseOverTimer = null;\n    }\n    this.thumbnailMouseOverTimer = window.setTimeout(() => {\n      this.slideToIndex(index);\n      this.pause();\n    }, 300);\n  }\n\n  onThumbnailMouseLeave() {\n    if (this.thumbnailMouseOverTimer) {\n      const { autoPlay } = this.props;\n      window.clearTimeout(this.thumbnailMouseOverTimer);\n      this.thumbnailMouseOverTimer = null;\n      if (autoPlay) {\n        this.play();\n      }\n    }\n  }\n\n  setThumbsTranslate(thumbsTranslate) {\n    this.setState({ thumbsTranslate });\n  }\n\n  setModalFullscreen(state) {\n    const { onScreenChange } = this.props;\n    this.setState({ modalFullscreen: state });\n    // manually call because browser does not support screenchange events\n    if (onScreenChange) {\n      onScreenChange(state);\n    }\n  }\n\n  getThumbsTranslate(indexDifference) {\n    const { disableThumbnailScroll, items } = this.props;\n    const { thumbnailsWrapperWidth, thumbnailsWrapperHeight } = this.state;\n    let totalScroll;\n    const thumbsElement = this.thumbnails && this.thumbnails.current;\n\n    if (disableThumbnailScroll) return 0;\n\n    if (thumbsElement) {\n      // total scroll required to see the last thumbnail\n      if (this.isThumbnailVertical()) {\n        if (thumbsElement.scrollHeight <= thumbnailsWrapperHeight) {\n          return 0;\n        }\n        totalScroll = thumbsElement.scrollHeight - thumbnailsWrapperHeight;\n      } else {\n        if (thumbsElement.scrollWidth <= thumbnailsWrapperWidth || thumbnailsWrapperWidth <= 0) {\n          return 0;\n        }\n        totalScroll = thumbsElement.scrollWidth - thumbnailsWrapperWidth;\n      }\n      // scroll-x required per index change\n      const perIndexScroll = totalScroll / (items.length - 1);\n      return indexDifference * perIndexScroll;\n    }\n    return 0;\n  }\n\n  getAlignmentClassName(index) {\n    // Necessary for lazing loading\n    const { currentIndex } = this.state;\n    const { infinite, items } = this.props;\n    let alignment = '';\n    const leftClassName = 'left';\n    const centerClassName = 'center';\n    const rightClassName = 'right';\n\n    switch (index) {\n      case (currentIndex - 1):\n        alignment = ` ${leftClassName}`;\n        break;\n      case (currentIndex):\n        alignment = ` ${centerClassName}`;\n        break;\n      case (currentIndex + 1):\n        alignment = ` ${rightClassName}`;\n        break;\n      default:\n        break;\n    }\n\n    if (items.length >= 3 && infinite) {\n      if (index === 0 && currentIndex === items.length - 1) {\n        // set first slide as right slide if were sliding right from last slide\n        alignment = ` ${rightClassName}`;\n      } else if (index === items.length - 1 && currentIndex === 0) {\n        // set last slide as left slide if were sliding left from first slide\n        alignment = ` ${leftClassName}`;\n      }\n    }\n\n    return alignment;\n  }\n\n  getTranslateXForTwoSlide(index) {\n    // For taking care of infinite swipe when there are only two slides\n    const { currentIndex, currentSlideOffset, previousIndex } = this.state;\n    const indexChanged = currentIndex !== previousIndex;\n    const firstSlideWasPrevSlide = index === 0 && previousIndex === 0;\n    const secondSlideWasPrevSlide = index === 1 && previousIndex === 1;\n    const firstSlideIsNextSlide = index === 0 && currentIndex === 1;\n    const secondSlideIsNextSlide = index === 1 && currentIndex === 0;\n    const swipingEnded = currentSlideOffset === 0;\n    const baseTranslateX = -100 * currentIndex;\n    let translateX = baseTranslateX + (index * 100) + currentSlideOffset;\n\n    // keep track of user swiping direction\n    // important to understand how to translateX based on last direction\n    if (currentSlideOffset > 0) {\n      this.direction = 'left';\n    } else if (currentSlideOffset < 0) {\n      this.direction = 'right';\n    }\n\n\n    // when swiping between two slides make sure the next and prev slides\n    // are on both left and right\n    if (secondSlideIsNextSlide && currentSlideOffset > 0) { // swiping right\n      translateX = -100 + currentSlideOffset;\n    }\n    if (firstSlideIsNextSlide && currentSlideOffset < 0) { // swiping left\n      translateX = 100 + currentSlideOffset;\n    }\n\n    if (indexChanged) {\n      // when indexChanged move the slide to the correct side\n      if (firstSlideWasPrevSlide && swipingEnded && this.direction === 'left') {\n        translateX = 100;\n      } else if (secondSlideWasPrevSlide && swipingEnded && this.direction === 'right') {\n        translateX = -100;\n      }\n    } else {\n      // keep the slide on the correct side if the swipe was not successful\n      if (secondSlideIsNextSlide && swipingEnded && this.direction === 'left') {\n        translateX = -100;\n      }\n      if (firstSlideIsNextSlide && swipingEnded && this.direction === 'right') {\n        translateX = 100;\n      }\n    }\n\n    return translateX;\n  }\n\n  getThumbnailBarHeight() {\n    if (this.isThumbnailVertical()) {\n      const { gallerySlideWrapperHeight } = this.state;\n      return { height: gallerySlideWrapperHeight };\n    }\n    return {};\n  }\n\n  getSlideStyle(index) {\n    const { currentIndex, currentSlideOffset, slideStyle } = this.state;\n    const {\n      infinite,\n      items,\n      useTranslate3D,\n      isRTL,\n    } = this.props;\n    const baseTranslateX = -100 * currentIndex;\n    const totalSlides = items.length - 1;\n\n    // calculates where the other slides belong based on currentIndex\n    // if it is RTL the base line should be reversed\n    let translateX = (baseTranslateX + (index * 100)) * (isRTL ? -1 : 1) + currentSlideOffset;\n\n    if (infinite && items.length > 2) {\n      if (currentIndex === 0 && index === totalSlides) {\n        // make the last slide the slide before the first\n        // if it is RTL the base line should be reversed\n        translateX = -100 * (isRTL ? -1 : 1) + currentSlideOffset;\n      } else if (currentIndex === totalSlides && index === 0) {\n        // make the first slide the slide after the last\n        // if it is RTL the base line should be reversed\n        translateX = 100 * (isRTL ? -1 : 1) + currentSlideOffset;\n      }\n    }\n\n    // Special case when there are only 2 items with infinite on\n    if (infinite && items.length === 2) {\n      translateX = this.getTranslateXForTwoSlide(index);\n    }\n\n    let translate = `translate(${translateX}%, 0)`;\n\n    if (useTranslate3D) {\n      translate = `translate3d(${translateX}%, 0, 0)`;\n    }\n\n    // don't show some slides while transitioning to avoid background transitions\n    const isVisible = this.isSlideVisible(index);\n\n    return {\n      display: isVisible ? 'inherit' : 'none',\n      WebkitTransform: translate,\n      MozTransform: translate,\n      msTransform: translate,\n      OTransform: translate,\n      transform: translate,\n      ...slideStyle\n    };\n  }\n\n  getCurrentIndex() {\n    const { currentIndex } = this.state;\n    return currentIndex;\n  }\n\n  getThumbnailStyle() {\n    let translate;\n    const { useTranslate3D, isRTL } = this.props;\n    const { thumbsTranslate, thumbsStyle } = this.state;\n    const verticalTranslateValue = isRTL ? thumbsTranslate * -1 : thumbsTranslate;\n\n    if (this.isThumbnailVertical()) {\n      translate = `translate(0, ${thumbsTranslate}px)`;\n      if (useTranslate3D) {\n        translate = `translate3d(0, ${thumbsTranslate}px, 0)`;\n      }\n    } else {\n      translate = `translate(${verticalTranslateValue}px, 0)`;\n      if (useTranslate3D) {\n        translate = `translate3d(${verticalTranslateValue}px, 0, 0)`;\n      }\n    }\n    return {\n      WebkitTransform: translate,\n      MozTransform: translate,\n      msTransform: translate,\n      OTransform: translate,\n      transform: translate,\n      ...thumbsStyle,\n    };\n  }\n\n  getSlideItems() {\n    const { currentIndex } = this.state;\n    const {\n      items,\n      slideOnThumbnailOver,\n      onClick,\n      lazyLoad,\n      onTouchMove,\n      onTouchEnd,\n      onTouchStart,\n      onMouseOver,\n      onMouseLeave,\n      renderItem,\n      renderThumbInner,\n      showThumbnails,\n      showBullets,\n    } = this.props;\n\n    const slides = [];\n    const thumbnails = [];\n    const bullets = [];\n\n    items.forEach((item, index) => {\n      const alignment = this.getAlignmentClassName(index);\n      const originalClass = item.originalClass ? ` ${item.originalClass}` : '';\n      const thumbnailClass = item.thumbnailClass ? ` ${item.thumbnailClass}` : '';\n      const handleRenderItem = item.renderItem || renderItem || this.renderItem;\n      const handleRenderThumbInner = item.renderThumbInner\n        || renderThumbInner || this.renderThumbInner;\n\n      const showItem = !lazyLoad || alignment || this.lazyLoaded[index];\n      if (showItem && lazyLoad && !this.lazyLoaded[index]) {\n        this.lazyLoaded[index] = true;\n      }\n\n      const slideStyle = this.getSlideStyle(index);\n\n      const slide = (\n        <div\n          aria-label={`Go to Slide ${index + 1}`}\n          key={`slide-${index}`}\n          tabIndex=\"-1\"\n          className={`image-gallery-slide ${alignment} ${originalClass}`}\n          style={slideStyle}\n          onClick={onClick}\n          onKeyUp={this.handleSlideKeyUp}\n          onTouchMove={onTouchMove}\n          onTouchEnd={onTouchEnd}\n          onTouchStart={onTouchStart}\n          onMouseOver={onMouseOver}\n          onFocus={onMouseOver}\n          onMouseLeave={onMouseLeave}\n          role=\"button\"\n        >\n          {showItem ? handleRenderItem(item) : <div style={{ height: '100%' }} />}\n        </div>\n      );\n\n      slides.push(slide);\n\n      // Don't add thumbnails if there is none\n      if (showThumbnails && item.thumbnail) {\n        const igThumbnailClass = clsx(\n          'image-gallery-thumbnail',\n          thumbnailClass,\n          { active: currentIndex === index },\n        );\n        thumbnails.push(\n          <button\n            key={`thumbnail-${index}`}\n            type=\"button\"\n            tabIndex=\"0\"\n            aria-pressed={currentIndex === index ? 'true' : 'false'}\n            aria-label={`Go to Slide ${index + 1}`}\n            className={igThumbnailClass}\n            onMouseLeave={slideOnThumbnailOver ? this.onThumbnailMouseLeave : null}\n            onMouseOver={event => this.handleThumbnailMouseOver(event, index)}\n            onFocus={event => this.handleThumbnailMouseOver(event, index)}\n            onKeyUp={event => this.handleThumbnailKeyUp(event, index)}\n            onClick={event => this.onThumbnailClick(event, index)}\n          >\n            {handleRenderThumbInner(item)}\n          </button>,\n        );\n      }\n\n      if (showBullets) {\n        // generate bullet elements and store them in array\n        const bulletOnClick = (event) => {\n          if (item.bulletOnClick) {\n            item.bulletOnClick({ item, itemIndex: index, currentIndex });\n          }\n          // blur element to remove outline caused by focus\n          event.target.blur();\n          return this.slideToIndex.call(this, index, event);\n        };\n        const igBulletClass = clsx(\n          'image-gallery-bullet',\n          item.bulletClass,\n          { active: currentIndex === index },\n        );\n        bullets.push(\n          <button\n            type=\"button\"\n            key={`bullet-${index}`}\n            className={igBulletClass}\n            onClick={bulletOnClick}\n            aria-pressed={currentIndex === index ? 'true' : 'false'}\n            aria-label={`Go to Slide ${index + 1}`}\n          />,\n        );\n      }\n    });\n\n    return {\n      slides,\n      thumbnails,\n      bullets,\n    };\n  }\n\n  ignoreIsTransitioning() {\n    /*\n      Ignore isTransitioning because were not going to sibling slides\n      e.g. center to left or center to right\n    */\n    const { items } = this.props;\n    const { previousIndex, currentIndex } = this.state;\n    const totalSlides = items.length - 1;\n\n    // we want to show the in between slides transition\n    const slidingMoreThanOneSlideLeftOrRight = Math.abs(previousIndex - currentIndex) > 1;\n    const notGoingFromFirstToLast = !(previousIndex === 0 && currentIndex === totalSlides);\n    const notGoingFromLastToFirst = !(previousIndex === totalSlides && currentIndex === 0);\n\n    return slidingMoreThanOneSlideLeftOrRight\n      && notGoingFromFirstToLast\n      && notGoingFromLastToFirst;\n  }\n\n  isFirstOrLastSlide(index) {\n    const { items } = this.props;\n    const totalSlides = items.length - 1;\n    const isLastSlide = index === totalSlides;\n    const isFirstSlide = index === 0;\n    return isLastSlide || isFirstSlide;\n  }\n\n\n  slideIsTransitioning(index) {\n    /*\n    returns true if the gallery is transitioning and the index is not the\n    previous or currentIndex\n    */\n    const { isTransitioning, previousIndex, currentIndex } = this.state;\n    const indexIsNotPreviousOrNextSlide = !(index === previousIndex || index === currentIndex);\n    return isTransitioning && indexIsNotPreviousOrNextSlide;\n  }\n\n  isSlideVisible(index) {\n    /*\n      Show slide if slide is the current slide and the next slide\n      OR\n      The slide is going more than one slide left or right, but not going from\n      first to last and not going from last to first\n\n      Edge case:\n      If you go to the first or last slide, when they're\n      not left, or right of each other they will try to catch up in the background\n      so unless were going from first to last or vice versa we don't want the first\n      or last slide to show up during the transition\n    */\n    return !this.slideIsTransitioning(index)\n      || (this.ignoreIsTransitioning() && !this.isFirstOrLastSlide(index));\n  }\n\n  slideThumbnailBar() {\n    const { currentIndex, isSwipingThumbnail } = this.state;\n    const nextTranslate = -this.getThumbsTranslate(currentIndex);\n    if (isSwipingThumbnail) {\n      return;\n    }\n\n    if (currentIndex === 0) {\n      this.setState({ thumbsTranslate: 0, thumbsSwipedTranslate: 0 });\n    } else {\n      this.setState({\n        thumbsTranslate: nextTranslate,\n        thumbsSwipedTranslate: nextTranslate,\n      });\n    }\n  }\n\n  canSlide() {\n    const { items } = this.props;\n    return items.length >= 2;\n  }\n\n  canSlideLeft() {\n    const { infinite, isRTL } = this.props;\n    return infinite || (isRTL ? this.canSlideNext() : this.canSlidePrevious());\n  }\n\n  canSlideRight() {\n    const { infinite, isRTL } = this.props;\n    return infinite || (isRTL ? this.canSlidePrevious() : this.canSlideNext());\n  }\n\n  canSlidePrevious() {\n    const { currentIndex } = this.state;\n    return currentIndex > 0;\n  }\n\n  canSlideNext() {\n    const { currentIndex } = this.state;\n    const { items } = this.props;\n    return currentIndex < items.length - 1;\n  }\n\n  handleSwiping({ event, absX, dir }) {\n    const { disableSwipe, stopPropagation } = this.props;\n    const {\n      galleryWidth,\n      isTransitioning,\n      swipingUpDown,\n      swipingLeftRight,\n    } = this.state;\n\n    // if the initial swiping is up/down prevent moving the slides until swipe ends\n    if ((dir === UP || dir === DOWN || swipingUpDown) && !swipingLeftRight) {\n      if (!swipingUpDown) {\n        this.setState({ swipingUpDown: true });\n      }\n      return;\n    }\n\n    if ((dir === LEFT || dir === RIGHT) && !swipingLeftRight) {\n      this.setState({ swipingLeftRight: true });\n    }\n\n    if (disableSwipe) return;\n\n    const { swipingTransitionDuration } = this.props;\n    if (stopPropagation) {\n      event.preventDefault();\n    }\n\n    if (!isTransitioning) {\n      const side = dir === RIGHT ? 1 : -1;\n\n      let currentSlideOffset = (absX / galleryWidth * 100);\n      if (Math.abs(currentSlideOffset) >= 100) {\n        currentSlideOffset = 100;\n      }\n\n      const swipingTransition = {\n        transition: `transform ${swipingTransitionDuration}ms ease-out`,\n      };\n\n      this.setState({\n        currentSlideOffset: side * currentSlideOffset,\n        slideStyle: swipingTransition,\n      });\n    } else {\n      // don't move the slide\n      this.setState({ currentSlideOffset: 0 });\n    }\n  }\n\n  handleThumbnailSwiping({\n    event,\n    absX,\n    absY,\n    dir,\n  }) {\n    const {\n      stopPropagation,\n      swipingThumbnailTransitionDuration,\n    } = this.props;\n    const {\n      thumbsSwipedTranslate,\n      thumbnailsWrapperHeight,\n      thumbnailsWrapperWidth,\n      swipingUpDown,\n      swipingLeftRight,\n    } = this.state;\n\n    if (this.isThumbnailVertical()) {\n      // if the initial swiping is left/right, prevent moving the thumbnail bar until swipe ends\n      if ((dir === LEFT || dir === RIGHT || swipingLeftRight) && !swipingUpDown) {\n        if (!swipingLeftRight) {\n          this.setState({ swipingLeftRight: true });\n        }\n        return;\n      }\n\n      if ((dir === UP || dir === DOWN) && !swipingUpDown) {\n        this.setState({ swipingUpDown: true });\n      }\n    } else {\n      // if the initial swiping is up/down, prevent moving the thumbnail bar until swipe ends\n      if ((dir === UP || dir === DOWN || swipingUpDown) && !swipingLeftRight) {\n        if (!swipingUpDown) {\n          this.setState({ swipingUpDown: true });\n        }\n        return;\n      }\n\n      if ((dir === LEFT || dir === RIGHT) && !swipingLeftRight) {\n        this.setState({ swipingLeftRight: true });\n      }\n    }\n\n    const thumbsElement = this.thumbnails && this.thumbnails.current;\n    const emptySpaceMargin = 20; // 20px to add some margin to show empty space\n\n    let thumbsTranslate;\n    let totalSwipeableLength;\n    let hasSwipedPassedEnd;\n    let hasSwipedPassedStart;\n    let isThumbnailBarSmallerThanContainer;\n\n    if (this.isThumbnailVertical()) {\n      const slideY = dir === DOWN ? absY : -absY;\n      thumbsTranslate = thumbsSwipedTranslate + slideY;\n      totalSwipeableLength = thumbsElement.scrollHeight\n        - thumbnailsWrapperHeight + emptySpaceMargin;\n      hasSwipedPassedEnd = Math.abs(thumbsTranslate) > totalSwipeableLength;\n      hasSwipedPassedStart = thumbsTranslate > emptySpaceMargin;\n      isThumbnailBarSmallerThanContainer = thumbsElement.scrollHeight <= thumbnailsWrapperHeight;\n    } else {\n      const slideX = dir === RIGHT ? absX : -absX;\n      thumbsTranslate = thumbsSwipedTranslate + slideX;\n      totalSwipeableLength = thumbsElement.scrollWidth\n        - thumbnailsWrapperWidth + emptySpaceMargin;\n      hasSwipedPassedEnd = Math.abs(thumbsTranslate) > totalSwipeableLength;\n      hasSwipedPassedStart = thumbsTranslate > emptySpaceMargin;\n      isThumbnailBarSmallerThanContainer = thumbsElement.scrollWidth <= thumbnailsWrapperWidth;\n    }\n\n    if (isThumbnailBarSmallerThanContainer) {\n      // no need to swipe a thumbnail bar smaller/shorter than its container\n      return;\n    }\n\n    if ((dir === LEFT || dir === UP) && hasSwipedPassedEnd) {\n      // prevent further swipeing\n      return;\n    }\n\n    if ((dir === RIGHT || dir === DOWN) && hasSwipedPassedStart) {\n      // prevent further swipeing\n      return;\n    }\n\n    if (stopPropagation) event.stopPropagation();\n\n    const swipingTransition = {\n      transition: `transform ${swipingThumbnailTransitionDuration}ms ease-out`,\n    };\n\n    this.setState({\n      thumbsTranslate,\n      thumbsStyle: swipingTransition,\n    });\n  }\n\n  handleOnThumbnailSwiped() {\n    const { thumbsTranslate } = this.state;\n    const { slideDuration } = this.props;\n    this.resetSwipingDirection();\n    this.setState({\n      isSwipingThumbnail: true,\n      thumbsSwipedTranslate: thumbsTranslate,\n      thumbsStyle: { transition: `all ${slideDuration}ms ease-out` },\n    });\n  }\n\n  sufficientSwipe() {\n    const { currentSlideOffset } = this.state;\n    const { swipeThreshold } = this.props;\n    return Math.abs(currentSlideOffset) > swipeThreshold;\n  }\n\n  resetSwipingDirection() {\n    const { swipingUpDown, swipingLeftRight } = this.state;\n    if (swipingUpDown) {\n      // user stopped swipingUpDown, reset\n      this.setState({ swipingUpDown: false });\n    }\n\n    if (swipingLeftRight) {\n      // user stopped swipingLeftRight, reset\n      this.setState({ swipingLeftRight: false });\n    }\n  }\n\n  handleOnSwiped({ event, dir, velocity }) {\n    const { disableSwipe, stopPropagation, flickThreshold } = this.props;\n\n    if (disableSwipe) return;\n\n    const { isRTL } = this.props;\n    if (stopPropagation) event.stopPropagation();\n    this.resetSwipingDirection();\n\n    // if it is RTL the direction is reversed\n    const swipeDirection = (dir === LEFT ? 1 : -1) * (isRTL ? -1 : 1);\n    const isSwipeUpOrDown = dir === UP || dir === DOWN;\n    const isLeftRightFlick = (velocity > flickThreshold) && !isSwipeUpOrDown;\n    this.handleOnSwipedTo(swipeDirection, isLeftRightFlick);\n  }\n\n  handleOnSwipedTo(swipeDirection, isLeftRightFlick) {\n    const { currentIndex, isTransitioning } = this.state;\n    let slideTo = currentIndex;\n\n    if ((this.sufficientSwipe() || isLeftRightFlick) && !isTransitioning) {\n      // slideto the next/prev slide\n      slideTo += swipeDirection;\n    }\n\n    // If we can't swipe left or right, stay in the current index (noop)\n    if ((swipeDirection === -1 && !this.canSlideLeft())\n      || (swipeDirection === 1 && !this.canSlideRight())) {\n      slideTo = currentIndex;\n    }\n\n    this.unthrottledSlideToIndex(slideTo);\n  }\n\n  handleTouchMove(event) {\n    const { swipingLeftRight } = this.state;\n    if (swipingLeftRight) {\n      // prevent background scrolling up and down while swiping left and right\n      event.preventDefault();\n    }\n  }\n\n  handleMouseDown() {\n    // keep track of mouse vs keyboard usage for a11y\n    this.imageGallery.current.classList.add('image-gallery-using-mouse');\n  }\n\n  handleKeyDown(event) {\n    const { disableKeyDown, useBrowserFullscreen } = this.props;\n    const { isFullscreen } = this.state;\n    // keep track of mouse vs keyboard usage for a11y\n    this.imageGallery.current.classList.remove('image-gallery-using-mouse');\n\n    if (disableKeyDown) return;\n    const LEFT_ARROW = 37;\n    const RIGHT_ARROW = 39;\n    const ESC_KEY = 27;\n    const key = parseInt(event.keyCode || event.which || 0, 10);\n\n    switch (key) {\n      case LEFT_ARROW:\n        if (this.canSlideLeft() && !this.playPauseIntervalId) {\n          this.slideLeft(event);\n        }\n        break;\n      case RIGHT_ARROW:\n        if (this.canSlideRight() && !this.playPauseIntervalId) {\n          this.slideRight(event);\n        }\n        break;\n      case ESC_KEY:\n        if (isFullscreen && !useBrowserFullscreen) {\n          this.exitFullScreen();\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleImageError(event) {\n    const { onErrorImageURL } = this.props;\n    if (onErrorImageURL && event.target.src.indexOf(onErrorImageURL) === -1) {\n      /* eslint-disable no-param-reassign */\n      event.target.src = onErrorImageURL;\n      /* eslint-enable no-param-reassign */\n    }\n  }\n\n  removeResizeObserver() {\n    if (this.resizeObserver\n      && this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current) {\n      this.resizeObserver.unobserve(this.imageGallerySlideWrapper.current);\n      this.resizeObserver = null;\n    }\n  }\n\n  handleResize() {\n    const { currentIndex } = this.state;\n\n    // if there is no resizeObserver, component has been unmounted\n    if (!this.resizeObserver) {\n      return;\n    }\n\n    if (this.imageGallery && this.imageGallery.current) {\n      this.setState({ galleryWidth: this.imageGallery.current.offsetWidth });\n    }\n\n    if (this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current) {\n      this.setState({\n        gallerySlideWrapperHeight: this.imageGallerySlideWrapper.current.offsetHeight,\n      });\n    }\n\n    if (this.thumbnailsWrapper && this.thumbnailsWrapper.current) {\n      if (this.isThumbnailVertical()) {\n        this.setState({ thumbnailsWrapperHeight: this.thumbnailsWrapper.current.offsetHeight });\n      } else {\n        this.setState({ thumbnailsWrapperWidth: this.thumbnailsWrapper.current.offsetWidth });\n      }\n    }\n\n    // Adjust thumbnail container when thumbnail width or height is adjusted\n    this.setThumbsTranslate(-this.getThumbsTranslate(currentIndex));\n  }\n\n  initResizeObserver(element) {\n    this.resizeObserver = new ResizeObserver(debounce((entries) => {\n      if (!entries) return;\n      entries.forEach(() => {\n        this.handleResize();\n      });\n    }, 300));\n    this.resizeObserver.observe(element.current);\n  }\n\n  toggleFullScreen() {\n    const { isFullscreen } = this.state;\n    if (isFullscreen) {\n      this.exitFullScreen();\n    } else {\n      this.fullScreen();\n    }\n  }\n\n  togglePlay() {\n    if (this.playPauseIntervalId) {\n      this.pause();\n    } else {\n      this.play();\n    }\n  }\n\n\n  handleScreenChange() {\n    /*\n      handles screen change events that the browser triggers e.g. esc key\n    */\n    const { onScreenChange, useBrowserFullscreen } = this.props;\n    const fullScreenElement = document.fullscreenElement\n      || document.msFullscreenElement\n      || document.mozFullScreenElement\n      || document.webkitFullscreenElement;\n\n    // check if screenchange element is the gallery\n    const isFullscreen = this.imageGallery.current === fullScreenElement;\n    if (onScreenChange) onScreenChange(isFullscreen);\n    if (useBrowserFullscreen) this.setState({ isFullscreen });\n  }\n\n  slideToIndex(index, event) {\n    const { currentIndex, isTransitioning } = this.state;\n    const { items, slideDuration, onBeforeSlide } = this.props;\n\n    if (!isTransitioning) {\n      if (event) {\n        if (this.playPauseIntervalId) {\n          // user triggered event while ImageGallery is playing, reset interval\n          this.pause(false);\n          this.play(false);\n        }\n      }\n\n      const slideCount = items.length - 1;\n      let nextIndex = index;\n      if (index < 0) {\n        nextIndex = slideCount;\n      } else if (index > slideCount) {\n        nextIndex = 0;\n      }\n\n      if (onBeforeSlide && nextIndex !== currentIndex) {\n        onBeforeSlide(nextIndex);\n      }\n\n      this.setState({\n        previousIndex: currentIndex,\n        currentIndex: nextIndex,\n        isTransitioning: nextIndex !== currentIndex,\n        currentSlideOffset: 0,\n        slideStyle: { transition: `all ${slideDuration}ms ease-out` },\n      }, this.onSliding);\n    }\n  }\n\n  slideLeft(event) {\n    const { isRTL } = this.props;\n    this.slideTo(event, isRTL ? 'right' : 'left')\n  }\n\n  slideRight(event) {\n    const { isRTL } = this.props;\n    this.slideTo(event, isRTL ? 'left' : 'right')\n  }\n\n  slideTo(event, direction) {\n    const { currentIndex, currentSlideOffset, isTransitioning } = this.state;\n    const { items } = this.props;\n    const nextIndex = currentIndex + (direction === 'left' ? -1 : 1)\n\n    if (isTransitioning) return;\n\n    if (items.length === 2) {\n      /*\n        When there are only 2 slides fake a tiny swipe to get the slides\n        on the correct side for transitioning\n      */\n      this.setState({\n        // this will reset once index changes\n        currentSlideOffset: currentSlideOffset + (direction === 'left' ? 0.001 : -0.001),\n        slideStyle: { transition: 'none' }, // move the slide over instantly\n      }, () => {\n        // add 25ms timeout to avoid delay in moving slides over\n        window.setTimeout(() => this.slideToIndex(nextIndex, event), 25);\n      });\n    } else {\n      this.slideToIndex(nextIndex, event);\n    }\n  }\n\n  handleThumbnailMouseOver(event, index) {\n    const { slideOnThumbnailOver } = this.props;\n    if (slideOnThumbnailOver) this.onThumbnailMouseOver(event, index);\n  }\n\n  handleThumbnailKeyUp(event, index) {\n    // a11y support ^_^\n    if (isEnterOrSpaceKey(event)) this.onThumbnailClick(event, index);\n  }\n\n  handleSlideKeyUp(event) {\n    // a11y support ^_^\n    if (isEnterOrSpaceKey(event)) {\n      const { onClick } = this.props;\n      onClick(event);\n    }\n  }\n\n  isThumbnailVertical() {\n    const { thumbnailPosition } = this.props;\n    return thumbnailPosition === 'left' || thumbnailPosition === 'right';\n  }\n\n  addScreenChangeEvent() {\n    screenChangeEvents.forEach((eventName) => {\n      document.addEventListener(eventName, this.handleScreenChange);\n    });\n  }\n\n  removeScreenChangeEvent() {\n    screenChangeEvents.forEach((eventName) => {\n      document.removeEventListener(eventName, this.handleScreenChange);\n    });\n  }\n\n  fullScreen() {\n    const { useBrowserFullscreen } = this.props;\n    const gallery = this.imageGallery.current;\n    if (useBrowserFullscreen) {\n      if (gallery.requestFullscreen) {\n        gallery.requestFullscreen();\n      } else if (gallery.msRequestFullscreen) {\n        gallery.msRequestFullscreen();\n      } else if (gallery.mozRequestFullScreen) {\n        gallery.mozRequestFullScreen();\n      } else if (gallery.webkitRequestFullscreen) {\n        gallery.webkitRequestFullscreen();\n      } else {\n        // fallback to fullscreen modal for unsupported browsers\n        this.setModalFullscreen(true);\n      }\n    } else {\n      this.setModalFullscreen(true);\n    }\n    this.setState({ isFullscreen: true });\n  }\n\n  exitFullScreen() {\n    const { isFullscreen } = this.state;\n    const { useBrowserFullscreen } = this.props;\n    if (isFullscreen) {\n      if (useBrowserFullscreen) {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        } else {\n          // fallback to fullscreen modal for unsupported browsers\n          this.setModalFullscreen(false);\n        }\n      } else {\n        this.setModalFullscreen(false);\n      }\n      this.setState({ isFullscreen: false });\n    }\n  }\n\n  pauseOrPlay() {\n    const { infinite } = this.props;\n    const { currentIndex } = this.state;\n    if (!infinite && !this.canSlideRight()) {\n      this.pause();\n    } else {\n      this.slideToIndex(currentIndex + 1);\n    }\n  }\n\n  play(shouldCallOnPlay = true) {\n    const {\n      onPlay,\n      slideInterval,\n      slideDuration,\n    } = this.props;\n    const { currentIndex } = this.state;\n    if (!this.playPauseIntervalId) {\n      this.setState({ isPlaying: true });\n      this.playPauseIntervalId = window.setInterval(\n        this.pauseOrPlay,\n        Math.max(slideInterval, slideDuration),\n      );\n      if (onPlay && shouldCallOnPlay) {\n        onPlay(currentIndex);\n      }\n    }\n  }\n\n  pause(shouldCallOnPause = true) {\n    const { onPause } = this.props;\n    const { currentIndex } = this.state;\n    if (this.playPauseIntervalId) {\n      window.clearInterval(this.playPauseIntervalId);\n      this.playPauseIntervalId = null;\n      this.setState({ isPlaying: false });\n      if (onPause && shouldCallOnPause) {\n        onPause(currentIndex);\n      }\n    }\n  }\n\n  isImageLoaded(item) {\n    /*\n      Keep track of images loaded so that onImageLoad prop is not\n      called multiple times when re-render the images\n    */\n    const imageExists = this.loadedImages[item.original];\n    if (imageExists) {\n      return true;\n    }\n    // add image as loaded\n    this.loadedImages[item.original] = true;\n    return false;\n  }\n\n  handleImageLoaded(event, original) {\n    const { onImageLoad } = this.props;\n    const imageExists = this.loadedImages[original];\n    if (!imageExists && onImageLoad) {\n      this.loadedImages[original] = true; // prevent from call again\n      // image just loaded, call onImageLoad\n      onImageLoad(event);\n    }\n  }\n\n  renderItem(item) {\n    const { isFullscreen } = this.state;\n    const { onImageError } = this.props;\n    const handleImageError = onImageError || this.handleImageError;\n\n    return (\n      <Item\n        description={item.description}\n        fullscreen={item.fullscreen}\n        handleImageLoaded={this.handleImageLoaded}\n        isFullscreen={isFullscreen}\n        onImageError={handleImageError}\n        original={item.original}\n        originalAlt={item.originalAlt}\n        originalHeight={item.originalHeight}\n        originalWidth={item.originalWidth}\n        originalTitle={item.originalTitle}\n        sizes={item.sizes}\n        loading={item.loading}\n        srcSet={item.srcSet}\n      />\n    );\n  }\n\n  renderThumbInner(item) {\n    const { onThumbnailError } = this.props;\n    const handleThumbnailError = onThumbnailError || this.handleImageError;\n\n    return (\n      <span className=\"image-gallery-thumbnail-inner\">\n        <img\n          className=\"image-gallery-thumbnail-image\"\n          src={item.thumbnail}\n          height={item.thumbnailHeight}\n          width={item.thumbnailWidth}\n          alt={item.thumbnailAlt}\n          title={item.thumbnailTitle}\n          loading={item.thumbnailLoading}\n          onError={handleThumbnailError}\n        />\n        {\n          item.thumbnailLabel && (\n            <div className=\"image-gallery-thumbnail-label\">\n              {item.thumbnailLabel}\n            </div>\n          )\n        }\n      </span>\n    );\n  }\n\n  render() {\n    const {\n      currentIndex,\n      isFullscreen,\n      modalFullscreen,\n      isPlaying,\n    } = this.state;\n\n    const {\n      additionalClass,\n      disableThumbnailSwipe,\n      indexSeparator, // deprecate soon, and allow custom render\n      isRTL,\n      items,\n      thumbnailPosition,\n      renderFullscreenButton,\n      renderCustomControls,\n      renderLeftNav,\n      renderRightNav,\n      showBullets,\n      showFullscreenButton,\n      showIndex,\n      showThumbnails,\n      showNav,\n      showPlayButton,\n      renderPlayPauseButton,\n    } = this.props;\n\n    const thumbnailStyle = this.getThumbnailStyle();\n    const { slides, thumbnails, bullets } = this.getSlideItems();\n    const slideWrapperClass = clsx(\n      'image-gallery-slide-wrapper',\n      thumbnailPosition,\n      { 'image-gallery-rtl': isRTL },\n    );\n\n    const slideWrapper = (\n      <div ref={this.imageGallerySlideWrapper} className={slideWrapperClass}>\n        {renderCustomControls && renderCustomControls()}\n        {\n          this.canSlide() ? (\n            <React.Fragment>\n              {\n                showNav && (\n                  <React.Fragment>\n                    {renderLeftNav(this.slideLeft, !this.canSlideLeft())}\n                    {renderRightNav(this.slideRight, !this.canSlideRight())}\n                  </React.Fragment>\n                )\n              }\n              <SwipeWrapper\n                className=\"image-gallery-swipe\"\n                delta={0}\n                onSwiping={this.handleSwiping}\n                onSwiped={this.handleOnSwiped}\n              >\n                <div className=\"image-gallery-slides\">\n                  {slides}\n                </div>\n              </SwipeWrapper>\n            </React.Fragment>\n          ) : (\n            <div className=\"image-gallery-slides\">\n              {slides}\n            </div>\n          )\n        }\n        {showPlayButton && renderPlayPauseButton(this.togglePlay, isPlaying)}\n        {\n          showBullets && (\n            <div className=\"image-gallery-bullets\">\n              <div\n                className=\"image-gallery-bullets-container\"\n                role=\"navigation\"\n                aria-label=\"Bullet Navigation\"\n              >\n                {bullets}\n              </div>\n            </div>\n          )\n        }\n        {showFullscreenButton && renderFullscreenButton(this.toggleFullScreen, isFullscreen)}\n        {\n          showIndex && (\n            <div className=\"image-gallery-index\">\n              <span className=\"image-gallery-index-current\">\n                {currentIndex + 1}\n              </span>\n              <span className=\"image-gallery-index-separator\">\n                {indexSeparator}\n              </span>\n              <span className=\"image-gallery-index-total\">\n                {items.length}\n              </span>\n            </div>\n          )\n        }\n      </div>\n    );\n\n    const igClass = clsx('image-gallery', additionalClass, { 'fullscreen-modal': modalFullscreen });\n    const igContentClass = clsx('image-gallery-content', thumbnailPosition, { fullscreen: isFullscreen });\n    const thumbnailWrapperClass = clsx(\n      'image-gallery-thumbnails-wrapper',\n      thumbnailPosition,\n      { 'thumbnails-wrapper-rtl': !this.isThumbnailVertical() && isRTL },\n      { 'thumbnails-swipe-horizontal': !this.isThumbnailVertical() && !disableThumbnailSwipe },\n      { 'thumbnails-swipe-vertical': this.isThumbnailVertical() && !disableThumbnailSwipe },\n    );\n    return (\n      <div\n        ref={this.imageGallery}\n        className={igClass}\n        aria-live=\"polite\"\n      >\n        <div className={igContentClass}>\n          {(thumbnailPosition === 'bottom' || thumbnailPosition === 'right') && slideWrapper}\n          {\n            showThumbnails && thumbnails.length > 0 ? (\n              <SwipeWrapper\n                className={thumbnailWrapperClass}\n                delta={0}\n                onSwiping={!disableThumbnailSwipe && this.handleThumbnailSwiping}\n                onSwiped={!disableThumbnailSwipe && this.handleOnThumbnailSwiped}\n              >\n                <div className=\"image-gallery-thumbnails\" ref={this.thumbnailsWrapper} style={this.getThumbnailBarHeight()}>\n                  <nav\n                    ref={this.thumbnails}\n                    className=\"image-gallery-thumbnails-container\"\n                    style={thumbnailStyle}\n                    aria-label=\"Thumbnail Navigation\"\n                  >\n                    {thumbnails}\n                  </nav>\n                </div>\n              </SwipeWrapper>\n            ) : null\n          }\n          {(thumbnailPosition === 'top' || thumbnailPosition === 'left') && slideWrapper}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nImageGallery.propTypes = {\n  flickThreshold: number,\n  items: arrayOf(shape({\n    bulletClass: string,\n    bulletOnClick: func,\n    description: string,\n    original: string,\n    originalHeight: number,\n    originalWidth: number,\n    loading: string,\n    thumbnailHeight: number,\n    thumbnailWidth: number,\n    thumbnailLoading: string,\n    fullscreen: string,\n    originalAlt: string,\n    originalTitle: string,\n    thumbnail: string,\n    thumbnailAlt: string,\n    thumbnailLabel: string,\n    thumbnailTitle: string,\n    originalClass: string,\n    thumbnailClass: string,\n    renderItem: func,\n    renderThumbInner: func,\n    imageSet: imageSetType,\n    srcSet: string,\n    sizes: string,\n  })).isRequired,\n  showNav: bool,\n  autoPlay: bool,\n  lazyLoad: bool,\n  infinite: bool,\n  showIndex: bool,\n  showBullets: bool,\n  showThumbnails: bool,\n  showPlayButton: bool,\n  showFullscreenButton: bool,\n  disableThumbnailScroll: bool,\n  disableKeyDown: bool,\n  disableSwipe: bool,\n  disableThumbnailSwipe: bool,\n  useBrowserFullscreen: bool,\n  onErrorImageURL: string,\n  indexSeparator: string,\n  thumbnailPosition: oneOf(['top', 'bottom', 'left', 'right']),\n  startIndex: number,\n  slideDuration: number,\n  slideInterval: number,\n  slideOnThumbnailOver: bool,\n  swipeThreshold: number,\n  swipingTransitionDuration: number,\n  swipingThumbnailTransitionDuration: number,\n  onSlide: func,\n  onBeforeSlide: func,\n  onScreenChange: func,\n  onPause: func,\n  onPlay: func,\n  onClick: func,\n  onImageLoad: func,\n  onImageError: func,\n  onTouchMove: func,\n  onTouchEnd: func,\n  onTouchStart: func,\n  onMouseOver: func,\n  onMouseLeave: func,\n  onThumbnailError: func,\n  onThumbnailClick: func,\n  renderCustomControls: func,\n  renderLeftNav: func,\n  renderRightNav: func,\n  renderPlayPauseButton: func,\n  renderFullscreenButton: func,\n  renderItem: func,\n  renderThumbInner: func,\n  stopPropagation: bool,\n  additionalClass: string,\n  useTranslate3D: bool,\n  isRTL: bool,\n  useWindowKeyDown: bool,\n};\n\nImageGallery.defaultProps = {\n  onErrorImageURL: '',\n  additionalClass: '',\n  showNav: true,\n  autoPlay: false,\n  lazyLoad: false,\n  infinite: true,\n  showIndex: false,\n  showBullets: false,\n  showThumbnails: true,\n  showPlayButton: true,\n  showFullscreenButton: true,\n  disableThumbnailScroll: false,\n  disableKeyDown: false,\n  disableSwipe: false,\n  disableThumbnailSwipe: false,\n  useTranslate3D: true,\n  isRTL: false,\n  useBrowserFullscreen: true,\n  flickThreshold: 0.4,\n  stopPropagation: false,\n  indexSeparator: ' / ',\n  thumbnailPosition: 'bottom',\n  startIndex: 0,\n  slideDuration: 450,\n  swipingTransitionDuration: 0,\n  swipingThumbnailTransitionDuration: 0,\n  onSlide: null,\n  onBeforeSlide: null,\n  onScreenChange: null,\n  onPause: null,\n  onPlay: null,\n  onClick: null,\n  onImageLoad: null,\n  onImageError: null,\n  onTouchMove: null,\n  onTouchEnd: null,\n  onTouchStart: null,\n  onMouseOver: null,\n  onMouseLeave: null,\n  onThumbnailError: null,\n  onThumbnailClick: null,\n  renderCustomControls: null,\n  renderThumbInner: null,\n  renderItem: null,\n  slideInterval: 3000,\n  slideOnThumbnailOver: false,\n  swipeThreshold: 30,\n  renderLeftNav: (onClick, disabled) => (\n    <LeftNav onClick={onClick} disabled={disabled} />\n  ),\n  renderRightNav: (onClick, disabled) => (\n    <RightNav onClick={onClick} disabled={disabled} />\n  ),\n  renderPlayPauseButton: (onClick, isPlaying) => (\n    <PlayPause onClick={onClick} isPlaying={isPlaying} />\n  ),\n  renderFullscreenButton: (onClick, isFullscreen) => (\n    <Fullscreen onClick={onClick} isFullscreen={isFullscreen} />\n  ),\n  useWindowKeyDown: true,\n};\n\nexport default ImageGallery;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}